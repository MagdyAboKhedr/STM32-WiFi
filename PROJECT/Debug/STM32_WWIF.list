
STM32_WWIF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003470  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000378  0800357c  0800357c  0000457c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038f4  080038f4  0000505c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080038f4  080038f4  000048f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080038fc  080038fc  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038fc  080038fc  000048fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003900  08003900  00004900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003904  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000500  2000005c  08003960  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000055c  08003960  0000555c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000077c0  00000000  00000000  00005085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016c0  00000000  00000000  0000c845  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d8  00000000  00000000  0000df08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000545  00000000  00000000  0000e5e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d5c  00000000  00000000  0000eb25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000894a  00000000  00000000  00025881  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082428  00000000  00000000  0002e1cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b05f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020a8  00000000  00000000  000b0638  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000b26e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003564 	.word	0x08003564

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003564 	.word	0x08003564

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <ESP_SendAT>:
// Global response buffer
char response[512];

// Send AT command and wait for expected response
HAL_StatusTypeDef ESP_SendAT(const char *cmd, const char *expect, uint32_t timeout)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	f5ad 7d28 	sub.w	sp, sp, #672	@ 0x2a0
 8000162:	af02      	add	r7, sp, #8
 8000164:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8000168:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 800016c:	6018      	str	r0, [r3, #0]
 800016e:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8000172:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8000176:	6019      	str	r1, [r3, #0]
 8000178:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 800017c:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8000180:	601a      	str	r2, [r3, #0]
    char atCommand[128];
    memset(response, 0, sizeof(response));
 8000182:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000186:	2100      	movs	r1, #0
 8000188:	484e      	ldr	r0, [pc, #312]	@ (80002c4 <ESP_SendAT+0x168>)
 800018a:	f002 fd61 	bl	8002c50 <memset>

    snprintf(atCommand, sizeof(atCommand), "%s\r\n", cmd);
 800018e:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8000192:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 8000196:	f507 7004 	add.w	r0, r7, #528	@ 0x210
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	4a4a      	ldr	r2, [pc, #296]	@ (80002c8 <ESP_SendAT+0x16c>)
 800019e:	2180      	movs	r1, #128	@ 0x80
 80001a0:	f002 fcd4 	bl	8002b4c <sniprintf>

    if (HAL_UART_Transmit(&huart1, (uint8_t *)atCommand, strlen(atCommand), HAL_MAX_DELAY) != HAL_OK)
 80001a4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80001a8:	4618      	mov	r0, r3
 80001aa:	f7ff ffcf 	bl	800014c <strlen>
 80001ae:	4603      	mov	r3, r0
 80001b0:	b29a      	uxth	r2, r3
 80001b2:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 80001b6:	f04f 33ff 	mov.w	r3, #4294967295
 80001ba:	4844      	ldr	r0, [pc, #272]	@ (80002cc <ESP_SendAT+0x170>)
 80001bc:	f001 fe14 	bl	8001de8 <HAL_UART_Transmit>
 80001c0:	4603      	mov	r3, r0
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d008      	beq.n	80001d8 <ESP_SendAT+0x7c>
    {
        HAL_UART_Transmit(&huart2, (uint8_t *)"[ESP] Transmit failed\r\n", 23, HAL_MAX_DELAY);
 80001c6:	f04f 33ff 	mov.w	r3, #4294967295
 80001ca:	2217      	movs	r2, #23
 80001cc:	4940      	ldr	r1, [pc, #256]	@ (80002d0 <ESP_SendAT+0x174>)
 80001ce:	4841      	ldr	r0, [pc, #260]	@ (80002d4 <ESP_SendAT+0x178>)
 80001d0:	f001 fe0a 	bl	8001de8 <HAL_UART_Transmit>
        return HAL_ERROR;
 80001d4:	2301      	movs	r3, #1
 80001d6:	e070      	b.n	80002ba <ESP_SendAT+0x15e>
    }

    uint16_t index = 0;
 80001d8:	2300      	movs	r3, #0
 80001da:	f8a7 3296 	strh.w	r3, [r7, #662]	@ 0x296
    uint32_t tickstart = HAL_GetTick();
 80001de:	f000 fe31 	bl	8000e44 <HAL_GetTick>
 80001e2:	f8c7 0290 	str.w	r0, [r7, #656]	@ 0x290
    while ((HAL_GetTick() - tickstart) < timeout && index < sizeof(response) - 1)
 80001e6:	e022      	b.n	800022e <ESP_SendAT+0xd2>
    {
        if (HAL_UART_Receive(&huart1, (uint8_t *)&response[index], 1, 50) == HAL_OK)
 80001e8:	f8b7 3296 	ldrh.w	r3, [r7, #662]	@ 0x296
 80001ec:	4a35      	ldr	r2, [pc, #212]	@ (80002c4 <ESP_SendAT+0x168>)
 80001ee:	1899      	adds	r1, r3, r2
 80001f0:	2332      	movs	r3, #50	@ 0x32
 80001f2:	2201      	movs	r2, #1
 80001f4:	4835      	ldr	r0, [pc, #212]	@ (80002cc <ESP_SendAT+0x170>)
 80001f6:	f001 fe82 	bl	8001efe <HAL_UART_Receive>
 80001fa:	4603      	mov	r3, r0
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d104      	bne.n	800020a <ESP_SendAT+0xae>
        {
            index++;
 8000200:	f8b7 3296 	ldrh.w	r3, [r7, #662]	@ 0x296
 8000204:	3301      	adds	r3, #1
 8000206:	f8a7 3296 	strh.w	r3, [r7, #662]	@ 0x296
        }
        if (expect != NULL && strstr(response, expect) != NULL)
 800020a:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 800020e:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	2b00      	cmp	r3, #0
 8000216:	d00a      	beq.n	800022e <ESP_SendAT+0xd2>
 8000218:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 800021c:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8000220:	6819      	ldr	r1, [r3, #0]
 8000222:	4828      	ldr	r0, [pc, #160]	@ (80002c4 <ESP_SendAT+0x168>)
 8000224:	f002 fd1c 	bl	8002c60 <strstr>
 8000228:	4603      	mov	r3, r0
 800022a:	2b00      	cmp	r3, #0
 800022c:	d112      	bne.n	8000254 <ESP_SendAT+0xf8>
    while ((HAL_GetTick() - tickstart) < timeout && index < sizeof(response) - 1)
 800022e:	f000 fe09 	bl	8000e44 <HAL_GetTick>
 8000232:	4602      	mov	r2, r0
 8000234:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8000238:	1ad3      	subs	r3, r2, r3
 800023a:	f507 7226 	add.w	r2, r7, #664	@ 0x298
 800023e:	f5a2 7225 	sub.w	r2, r2, #660	@ 0x294
 8000242:	6812      	ldr	r2, [r2, #0]
 8000244:	429a      	cmp	r2, r3
 8000246:	d906      	bls.n	8000256 <ESP_SendAT+0xfa>
 8000248:	f8b7 3296 	ldrh.w	r3, [r7, #662]	@ 0x296
 800024c:	f5b3 7fff 	cmp.w	r3, #510	@ 0x1fe
 8000250:	d9ca      	bls.n	80001e8 <ESP_SendAT+0x8c>
 8000252:	e000      	b.n	8000256 <ESP_SendAT+0xfa>
        {
            break;
 8000254:	bf00      	nop
        }
    }

    char debug_msg[512];
    snprintf(debug_msg, sizeof(debug_msg), "[ESP] CMD: %s\r\n[ESP] Raw Rsp: %s\r\n", cmd, response);
 8000256:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 800025a:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 800025e:	f107 0010 	add.w	r0, r7, #16
 8000262:	4a18      	ldr	r2, [pc, #96]	@ (80002c4 <ESP_SendAT+0x168>)
 8000264:	9200      	str	r2, [sp, #0]
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4a1b      	ldr	r2, [pc, #108]	@ (80002d8 <ESP_SendAT+0x17c>)
 800026a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800026e:	f002 fc6d 	bl	8002b4c <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)debug_msg, strlen(debug_msg), HAL_MAX_DELAY);
 8000272:	f107 0310 	add.w	r3, r7, #16
 8000276:	4618      	mov	r0, r3
 8000278:	f7ff ff68 	bl	800014c <strlen>
 800027c:	4603      	mov	r3, r0
 800027e:	b29a      	uxth	r2, r3
 8000280:	f107 0110 	add.w	r1, r7, #16
 8000284:	f04f 33ff 	mov.w	r3, #4294967295
 8000288:	4812      	ldr	r0, [pc, #72]	@ (80002d4 <ESP_SendAT+0x178>)
 800028a:	f001 fdad 	bl	8001de8 <HAL_UART_Transmit>

    return (expect == NULL || strstr(response, expect) != NULL) ? HAL_OK : HAL_ERROR;
 800028e:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8000292:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	2b00      	cmp	r3, #0
 800029a:	d00c      	beq.n	80002b6 <ESP_SendAT+0x15a>
 800029c:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 80002a0:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 80002a4:	6819      	ldr	r1, [r3, #0]
 80002a6:	4807      	ldr	r0, [pc, #28]	@ (80002c4 <ESP_SendAT+0x168>)
 80002a8:	f002 fcda 	bl	8002c60 <strstr>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d101      	bne.n	80002b6 <ESP_SendAT+0x15a>
 80002b2:	2301      	movs	r3, #1
 80002b4:	e000      	b.n	80002b8 <ESP_SendAT+0x15c>
 80002b6:	2300      	movs	r3, #0
 80002b8:	b2db      	uxtb	r3, r3
}
 80002ba:	4618      	mov	r0, r3
 80002bc:	f507 7726 	add.w	r7, r7, #664	@ 0x298
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	2000020c 	.word	0x2000020c
 80002c8:	0800357c 	.word	0x0800357c
 80002cc:	20000078 	.word	0x20000078
 80002d0:	08003584 	.word	0x08003584
 80002d4:	200000c0 	.word	0x200000c0
 80002d8:	0800359c 	.word	0x0800359c

080002dc <ESP_Init>:
    HAL_UART_Transmit(&huart2, (uint8_t *)"[ESP] Restore failed.\r\n", 23, 200);
    Error_Handler();
}

void ESP_Init(void)
{
 80002dc:	b5b0      	push	{r4, r5, r7, lr}
 80002de:	b0e0      	sub	sp, #384	@ 0x180
 80002e0:	af00      	add	r7, sp, #0
    uint8_t temp;

    // --- Drain RX buffer before starting ---
    while (HAL_UART_Receive(&huart1, &temp, 1, 10) == HAL_OK);
 80002e2:	bf00      	nop
 80002e4:	f207 1163 	addw	r1, r7, #355	@ 0x163
 80002e8:	230a      	movs	r3, #10
 80002ea:	2201      	movs	r2, #1
 80002ec:	48c4      	ldr	r0, [pc, #784]	@ (8000600 <ESP_Init+0x324>)
 80002ee:	f001 fe06 	bl	8001efe <HAL_UART_Receive>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d0f5      	beq.n	80002e4 <ESP_Init+0x8>

    // --- Step 1: Basic ESP Setup ---
    if (ESP_SendAT("AT", "OK", 1000) != HAL_OK) Error_Handler();
 80002f8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80002fc:	49c1      	ldr	r1, [pc, #772]	@ (8000604 <ESP_Init+0x328>)
 80002fe:	48c2      	ldr	r0, [pc, #776]	@ (8000608 <ESP_Init+0x32c>)
 8000300:	f7ff ff2c 	bl	800015c <ESP_SendAT>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <ESP_Init+0x32>
 800030a:	f000 fb0d 	bl	8000928 <Error_Handler>
    if (ESP_SendAT("AT+CWMODE=1", "OK", 2000) != HAL_OK) Error_Handler();
 800030e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000312:	49bc      	ldr	r1, [pc, #752]	@ (8000604 <ESP_Init+0x328>)
 8000314:	48bd      	ldr	r0, [pc, #756]	@ (800060c <ESP_Init+0x330>)
 8000316:	f7ff ff21 	bl	800015c <ESP_SendAT>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <ESP_Init+0x48>
 8000320:	f000 fb02 	bl	8000928 <Error_Handler>
    if (ESP_SendAT("AT+CWJAP=\"MA_HOME\",\"01289878405\"", "WIFI GOT IP", 20000) != HAL_OK) Error_Handler();
 8000324:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000328:	49b9      	ldr	r1, [pc, #740]	@ (8000610 <ESP_Init+0x334>)
 800032a:	48ba      	ldr	r0, [pc, #744]	@ (8000614 <ESP_Init+0x338>)
 800032c:	f7ff ff16 	bl	800015c <ESP_SendAT>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <ESP_Init+0x5e>
 8000336:	f000 faf7 	bl	8000928 <Error_Handler>
    if (ESP_SendAT("AT+CIPMUX=0", "OK", 2000) != HAL_OK) Error_Handler();
 800033a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800033e:	49b1      	ldr	r1, [pc, #708]	@ (8000604 <ESP_Init+0x328>)
 8000340:	48b5      	ldr	r0, [pc, #724]	@ (8000618 <ESP_Init+0x33c>)
 8000342:	f7ff ff0b 	bl	800015c <ESP_SendAT>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <ESP_Init+0x74>
 800034c:	f000 faec 	bl	8000928 <Error_Handler>
    if (ESP_SendAT("AT+CIPSTART=\"TCP\",\"192.168.1.104\",1883", "CONNECT", 10000) != HAL_OK) Error_Handler();
 8000350:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000354:	49b1      	ldr	r1, [pc, #708]	@ (800061c <ESP_Init+0x340>)
 8000356:	48b2      	ldr	r0, [pc, #712]	@ (8000620 <ESP_Init+0x344>)
 8000358:	f7ff ff00 	bl	800015c <ESP_SendAT>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <ESP_Init+0x8a>
 8000362:	f000 fae1 	bl	8000928 <Error_Handler>

    // --- Step 2: Send MQTT CONNECT packet ---
    const uint8_t mqttConnect[] = {
 8000366:	4baf      	ldr	r3, [pc, #700]	@ (8000624 <ESP_Init+0x348>)
 8000368:	f507 74a8 	add.w	r4, r7, #336	@ 0x150
 800036c:	461d      	mov	r5, r3
 800036e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000370:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000372:	682b      	ldr	r3, [r5, #0]
 8000374:	461a      	mov	r2, r3
 8000376:	8022      	strh	r2, [r4, #0]
 8000378:	3402      	adds	r4, #2
 800037a:	0c1b      	lsrs	r3, r3, #16
 800037c:	7023      	strb	r3, [r4, #0]
        0x00, 0x05,                    // Client ID length
        'S', 'T', 'M', '3', '2'        // Client ID: "STM32"
    };

    char cipsendCmd[32];
    sprintf(cipsendCmd, "AT+CIPSEND=%d", sizeof(mqttConnect));
 800037e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000382:	2213      	movs	r2, #19
 8000384:	49a8      	ldr	r1, [pc, #672]	@ (8000628 <ESP_Init+0x34c>)
 8000386:	4618      	mov	r0, r3
 8000388:	f002 fc16 	bl	8002bb8 <siprintf>
    if (ESP_SendAT(cipsendCmd, ">", 5000) != HAL_OK) Error_Handler();
 800038c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000390:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000394:	49a5      	ldr	r1, [pc, #660]	@ (800062c <ESP_Init+0x350>)
 8000396:	4618      	mov	r0, r3
 8000398:	f7ff fee0 	bl	800015c <ESP_SendAT>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <ESP_Init+0xca>
 80003a2:	f000 fac1 	bl	8000928 <Error_Handler>

    HAL_UART_Transmit(&huart2, (uint8_t *)"[ESP] Sending MQTT CONNECT packet:\r\n", 36, HAL_MAX_DELAY);
 80003a6:	f04f 33ff 	mov.w	r3, #4294967295
 80003aa:	2224      	movs	r2, #36	@ 0x24
 80003ac:	49a0      	ldr	r1, [pc, #640]	@ (8000630 <ESP_Init+0x354>)
 80003ae:	48a1      	ldr	r0, [pc, #644]	@ (8000634 <ESP_Init+0x358>)
 80003b0:	f001 fd1a 	bl	8001de8 <HAL_UART_Transmit>
    for (uint8_t i = 0; i < sizeof(mqttConnect); i++) {
 80003b4:	2300      	movs	r3, #0
 80003b6:	f887 317f 	strb.w	r3, [r7, #383]	@ 0x17f
 80003ba:	e01f      	b.n	80003fc <ESP_Init+0x120>
        char byte_msg[16];
        snprintf(byte_msg, sizeof(byte_msg), "0x%02X ", mqttConnect[i]);
 80003bc:	f897 317f 	ldrb.w	r3, [r7, #383]	@ 0x17f
 80003c0:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80003c4:	443b      	add	r3, r7
 80003c6:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 80003ca:	f107 0020 	add.w	r0, r7, #32
 80003ce:	4a9a      	ldr	r2, [pc, #616]	@ (8000638 <ESP_Init+0x35c>)
 80003d0:	2110      	movs	r1, #16
 80003d2:	f002 fbbb 	bl	8002b4c <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t *)byte_msg, strlen(byte_msg), HAL_MAX_DELAY);
 80003d6:	f107 0320 	add.w	r3, r7, #32
 80003da:	4618      	mov	r0, r3
 80003dc:	f7ff feb6 	bl	800014c <strlen>
 80003e0:	4603      	mov	r3, r0
 80003e2:	b29a      	uxth	r2, r3
 80003e4:	f107 0120 	add.w	r1, r7, #32
 80003e8:	f04f 33ff 	mov.w	r3, #4294967295
 80003ec:	4891      	ldr	r0, [pc, #580]	@ (8000634 <ESP_Init+0x358>)
 80003ee:	f001 fcfb 	bl	8001de8 <HAL_UART_Transmit>
    for (uint8_t i = 0; i < sizeof(mqttConnect); i++) {
 80003f2:	f897 317f 	ldrb.w	r3, [r7, #383]	@ 0x17f
 80003f6:	3301      	adds	r3, #1
 80003f8:	f887 317f 	strb.w	r3, [r7, #383]	@ 0x17f
 80003fc:	f897 317f 	ldrb.w	r3, [r7, #383]	@ 0x17f
 8000400:	2b12      	cmp	r3, #18
 8000402:	d9db      	bls.n	80003bc <ESP_Init+0xe0>
    }
    HAL_UART_Transmit(&huart2, (uint8_t *)"\r\n", 2, HAL_MAX_DELAY);
 8000404:	f04f 33ff 	mov.w	r3, #4294967295
 8000408:	2202      	movs	r2, #2
 800040a:	498c      	ldr	r1, [pc, #560]	@ (800063c <ESP_Init+0x360>)
 800040c:	4889      	ldr	r0, [pc, #548]	@ (8000634 <ESP_Init+0x358>)
 800040e:	f001 fceb 	bl	8001de8 <HAL_UART_Transmit>

    if (HAL_UART_Transmit(&huart1, (uint8_t *)mqttConnect, sizeof(mqttConnect), HAL_MAX_DELAY) != HAL_OK) {
 8000412:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8000416:	f04f 33ff 	mov.w	r3, #4294967295
 800041a:	2213      	movs	r2, #19
 800041c:	4878      	ldr	r0, [pc, #480]	@ (8000600 <ESP_Init+0x324>)
 800041e:	f001 fce3 	bl	8001de8 <HAL_UART_Transmit>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	d001      	beq.n	800042c <ESP_Init+0x150>
        Error_Handler();
 8000428:	f000 fa7e 	bl	8000928 <Error_Handler>
    }

    // --- Step 3: Wait for "SEND OK" ---
    uint8_t response[256] = {0};
 800042c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8000430:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8000434:	4618      	mov	r0, r3
 8000436:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800043a:	461a      	mov	r2, r3
 800043c:	2100      	movs	r1, #0
 800043e:	f002 fc07 	bl	8002c50 <memset>
    uint16_t index = 0;
 8000442:	2300      	movs	r3, #0
 8000444:	f8a7 317c 	strh.w	r3, [r7, #380]	@ 0x17c
    uint32_t tickstart = HAL_GetTick();
 8000448:	f000 fcfc 	bl	8000e44 <HAL_GetTick>
 800044c:	f8c7 016c 	str.w	r0, [r7, #364]	@ 0x16c
    while ((HAL_GetTick() - tickstart) < 5000 && index < sizeof(response) - 1) {
 8000450:	e024      	b.n	800049c <ESP_Init+0x1c0>
        if (HAL_UART_Receive(&huart1, &response[index], 1, 1000) == HAL_OK) {
 8000452:	f8b7 317c 	ldrh.w	r3, [r7, #380]	@ 0x17c
 8000456:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800045a:	18d1      	adds	r1, r2, r3
 800045c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000460:	2201      	movs	r2, #1
 8000462:	4867      	ldr	r0, [pc, #412]	@ (8000600 <ESP_Init+0x324>)
 8000464:	f001 fd4b 	bl	8001efe <HAL_UART_Receive>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d116      	bne.n	800049c <ESP_Init+0x1c0>
            if (index >= 6 && memcmp(&response[index - 6], "SEND OK", 7) == 0) break;
 800046e:	f8b7 317c 	ldrh.w	r3, [r7, #380]	@ 0x17c
 8000472:	2b05      	cmp	r3, #5
 8000474:	d90d      	bls.n	8000492 <ESP_Init+0x1b6>
 8000476:	f8b7 317c 	ldrh.w	r3, [r7, #380]	@ 0x17c
 800047a:	3b06      	subs	r3, #6
 800047c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8000480:	4413      	add	r3, r2
 8000482:	2207      	movs	r2, #7
 8000484:	496e      	ldr	r1, [pc, #440]	@ (8000640 <ESP_Init+0x364>)
 8000486:	4618      	mov	r0, r3
 8000488:	f002 fbb8 	bl	8002bfc <memcmp>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d013      	beq.n	80004ba <ESP_Init+0x1de>
            index++;
 8000492:	f8b7 317c 	ldrh.w	r3, [r7, #380]	@ 0x17c
 8000496:	3301      	adds	r3, #1
 8000498:	f8a7 317c 	strh.w	r3, [r7, #380]	@ 0x17c
    while ((HAL_GetTick() - tickstart) < 5000 && index < sizeof(response) - 1) {
 800049c:	f000 fcd2 	bl	8000e44 <HAL_GetTick>
 80004a0:	4602      	mov	r2, r0
 80004a2:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80004a6:	1ad3      	subs	r3, r2, r3
 80004a8:	f241 3287 	movw	r2, #4999	@ 0x1387
 80004ac:	4293      	cmp	r3, r2
 80004ae:	d805      	bhi.n	80004bc <ESP_Init+0x1e0>
 80004b0:	f8b7 317c 	ldrh.w	r3, [r7, #380]	@ 0x17c
 80004b4:	2bfe      	cmp	r3, #254	@ 0xfe
 80004b6:	d9cc      	bls.n	8000452 <ESP_Init+0x176>
 80004b8:	e000      	b.n	80004bc <ESP_Init+0x1e0>
            if (index >= 6 && memcmp(&response[index - 6], "SEND OK", 7) == 0) break;
 80004ba:	bf00      	nop
        }
    }

    HAL_UART_Transmit(&huart2, (uint8_t *)"[ESP] Pre-CONNACK bytes:\r\n", 27, HAL_MAX_DELAY);
 80004bc:	f04f 33ff 	mov.w	r3, #4294967295
 80004c0:	221b      	movs	r2, #27
 80004c2:	4960      	ldr	r1, [pc, #384]	@ (8000644 <ESP_Init+0x368>)
 80004c4:	485b      	ldr	r0, [pc, #364]	@ (8000634 <ESP_Init+0x358>)
 80004c6:	f001 fc8f 	bl	8001de8 <HAL_UART_Transmit>
    for (uint16_t i = 0; i < index; i++) {
 80004ca:	2300      	movs	r3, #0
 80004cc:	f8a7 317a 	strh.w	r3, [r7, #378]	@ 0x17a
 80004d0:	e01f      	b.n	8000512 <ESP_Init+0x236>
        char byte_msg[16];
        snprintf(byte_msg, sizeof(byte_msg), "0x%02X ", response[i]);
 80004d2:	f8b7 317a 	ldrh.w	r3, [r7, #378]	@ 0x17a
 80004d6:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 80004da:	f5a2 72a8 	sub.w	r2, r2, #336	@ 0x150
 80004de:	5cd3      	ldrb	r3, [r2, r3]
 80004e0:	f107 0010 	add.w	r0, r7, #16
 80004e4:	4a54      	ldr	r2, [pc, #336]	@ (8000638 <ESP_Init+0x35c>)
 80004e6:	2110      	movs	r1, #16
 80004e8:	f002 fb30 	bl	8002b4c <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t *)byte_msg, strlen(byte_msg), HAL_MAX_DELAY);
 80004ec:	f107 0310 	add.w	r3, r7, #16
 80004f0:	4618      	mov	r0, r3
 80004f2:	f7ff fe2b 	bl	800014c <strlen>
 80004f6:	4603      	mov	r3, r0
 80004f8:	b29a      	uxth	r2, r3
 80004fa:	f107 0110 	add.w	r1, r7, #16
 80004fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000502:	484c      	ldr	r0, [pc, #304]	@ (8000634 <ESP_Init+0x358>)
 8000504:	f001 fc70 	bl	8001de8 <HAL_UART_Transmit>
    for (uint16_t i = 0; i < index; i++) {
 8000508:	f8b7 317a 	ldrh.w	r3, [r7, #378]	@ 0x17a
 800050c:	3301      	adds	r3, #1
 800050e:	f8a7 317a 	strh.w	r3, [r7, #378]	@ 0x17a
 8000512:	f8b7 217a 	ldrh.w	r2, [r7, #378]	@ 0x17a
 8000516:	f8b7 317c 	ldrh.w	r3, [r7, #380]	@ 0x17c
 800051a:	429a      	cmp	r2, r3
 800051c:	d3d9      	bcc.n	80004d2 <ESP_Init+0x1f6>
    }
    HAL_UART_Transmit(&huart2, (uint8_t *)"\r\n", 2, HAL_MAX_DELAY);
 800051e:	f04f 33ff 	mov.w	r3, #4294967295
 8000522:	2202      	movs	r2, #2
 8000524:	4945      	ldr	r1, [pc, #276]	@ (800063c <ESP_Init+0x360>)
 8000526:	4843      	ldr	r0, [pc, #268]	@ (8000634 <ESP_Init+0x358>)
 8000528:	f001 fc5e 	bl	8001de8 <HAL_UART_Transmit>

    // --- Step 4: Wait for "+IPD,4:" followed by CONNACK (0x20 0x02 0x00 0x00) ---
    memset(response, 0, sizeof(response));
 800052c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000530:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f002 fb8a 	bl	8002c50 <memset>
    index = 0;
 800053c:	2300      	movs	r3, #0
 800053e:	f8a7 317c 	strh.w	r3, [r7, #380]	@ 0x17c
    uint8_t ipd_found = 0;
 8000542:	2300      	movs	r3, #0
 8000544:	f887 316b 	strb.w	r3, [r7, #363]	@ 0x16b
    uint16_t ipd_start = 0;
 8000548:	2300      	movs	r3, #0
 800054a:	f8a7 3168 	strh.w	r3, [r7, #360]	@ 0x168
    tickstart = HAL_GetTick();
 800054e:	f000 fc79 	bl	8000e44 <HAL_GetTick>
 8000552:	f8c7 016c 	str.w	r0, [r7, #364]	@ 0x16c

    while ((HAL_GetTick() - tickstart) < 10000 && index < sizeof(response) - 1) {
 8000556:	e07e      	b.n	8000656 <ESP_Init+0x37a>
        if (HAL_UART_Receive(&huart1, &response[index], 1, 1000) == HAL_OK) {
 8000558:	f8b7 317c 	ldrh.w	r3, [r7, #380]	@ 0x17c
 800055c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8000560:	18d1      	adds	r1, r2, r3
 8000562:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000566:	2201      	movs	r2, #1
 8000568:	4825      	ldr	r0, [pc, #148]	@ (8000600 <ESP_Init+0x324>)
 800056a:	f001 fcc8 	bl	8001efe <HAL_UART_Receive>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d170      	bne.n	8000656 <ESP_Init+0x37a>
            if (!ipd_found && index >= 6 && memcmp(&response[index - 6], "+IPD,4:", 7) == 0) {
 8000574:	f897 316b 	ldrb.w	r3, [r7, #363]	@ 0x16b
 8000578:	2b00      	cmp	r3, #0
 800057a:	d167      	bne.n	800064c <ESP_Init+0x370>
 800057c:	f8b7 317c 	ldrh.w	r3, [r7, #380]	@ 0x17c
 8000580:	2b05      	cmp	r3, #5
 8000582:	d963      	bls.n	800064c <ESP_Init+0x370>
 8000584:	f8b7 317c 	ldrh.w	r3, [r7, #380]	@ 0x17c
 8000588:	3b06      	subs	r3, #6
 800058a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800058e:	4413      	add	r3, r2
 8000590:	2207      	movs	r2, #7
 8000592:	492d      	ldr	r1, [pc, #180]	@ (8000648 <ESP_Init+0x36c>)
 8000594:	4618      	mov	r0, r3
 8000596:	f002 fb31 	bl	8002bfc <memcmp>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d155      	bne.n	800064c <ESP_Init+0x370>
                ipd_found = 1;
 80005a0:	2301      	movs	r3, #1
 80005a2:	f887 316b 	strb.w	r3, [r7, #363]	@ 0x16b
                ipd_start = index + 1;
 80005a6:	f8b7 317c 	ldrh.w	r3, [r7, #380]	@ 0x17c
 80005aa:	3301      	adds	r3, #1
 80005ac:	f8a7 3168 	strh.w	r3, [r7, #360]	@ 0x168

                for (int i = 0; i < 4 && index < sizeof(response) - 1; i++) {
 80005b0:	2300      	movs	r3, #0
 80005b2:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 80005b6:	e017      	b.n	80005e8 <ESP_Init+0x30c>
                    if (HAL_UART_Receive(&huart1, &response[++index], 1, 1000) != HAL_OK)
 80005b8:	f8b7 317c 	ldrh.w	r3, [r7, #380]	@ 0x17c
 80005bc:	3301      	adds	r3, #1
 80005be:	f8a7 317c 	strh.w	r3, [r7, #380]	@ 0x17c
 80005c2:	f8b7 317c 	ldrh.w	r3, [r7, #380]	@ 0x17c
 80005c6:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80005ca:	18d1      	adds	r1, r2, r3
 80005cc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005d0:	2201      	movs	r2, #1
 80005d2:	480b      	ldr	r0, [pc, #44]	@ (8000600 <ESP_Init+0x324>)
 80005d4:	f001 fc93 	bl	8001efe <HAL_UART_Receive>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d10d      	bne.n	80005fa <ESP_Init+0x31e>
                for (int i = 0; i < 4 && index < sizeof(response) - 1; i++) {
 80005de:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80005e2:	3301      	adds	r3, #1
 80005e4:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 80005e8:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80005ec:	2b03      	cmp	r3, #3
 80005ee:	dc42      	bgt.n	8000676 <ESP_Init+0x39a>
 80005f0:	f8b7 317c 	ldrh.w	r3, [r7, #380]	@ 0x17c
 80005f4:	2bfe      	cmp	r3, #254	@ 0xfe
 80005f6:	d9df      	bls.n	80005b8 <ESP_Init+0x2dc>
                        break;
                }
                break;
 80005f8:	e03d      	b.n	8000676 <ESP_Init+0x39a>
                        break;
 80005fa:	bf00      	nop
                break;
 80005fc:	e03b      	b.n	8000676 <ESP_Init+0x39a>
 80005fe:	bf00      	nop
 8000600:	20000078 	.word	0x20000078
 8000604:	0800360c 	.word	0x0800360c
 8000608:	08003610 	.word	0x08003610
 800060c:	08003614 	.word	0x08003614
 8000610:	08003620 	.word	0x08003620
 8000614:	0800362c 	.word	0x0800362c
 8000618:	08003650 	.word	0x08003650
 800061c:	0800365c 	.word	0x0800365c
 8000620:	08003664 	.word	0x08003664
 8000624:	08003768 	.word	0x08003768
 8000628:	0800368c 	.word	0x0800368c
 800062c:	0800369c 	.word	0x0800369c
 8000630:	080036a0 	.word	0x080036a0
 8000634:	200000c0 	.word	0x200000c0
 8000638:	080036c8 	.word	0x080036c8
 800063c:	080036d0 	.word	0x080036d0
 8000640:	080036d4 	.word	0x080036d4
 8000644:	080036dc 	.word	0x080036dc
 8000648:	080036f8 	.word	0x080036f8
            }
            index++;
 800064c:	f8b7 317c 	ldrh.w	r3, [r7, #380]	@ 0x17c
 8000650:	3301      	adds	r3, #1
 8000652:	f8a7 317c 	strh.w	r3, [r7, #380]	@ 0x17c
    while ((HAL_GetTick() - tickstart) < 10000 && index < sizeof(response) - 1) {
 8000656:	f000 fbf5 	bl	8000e44 <HAL_GetTick>
 800065a:	4602      	mov	r2, r0
 800065c:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8000660:	1ad3      	subs	r3, r2, r3
 8000662:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000666:	4293      	cmp	r3, r2
 8000668:	d806      	bhi.n	8000678 <ESP_Init+0x39c>
 800066a:	f8b7 317c 	ldrh.w	r3, [r7, #380]	@ 0x17c
 800066e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000670:	f67f af72 	bls.w	8000558 <ESP_Init+0x27c>
 8000674:	e000      	b.n	8000678 <ESP_Init+0x39c>
                break;
 8000676:	bf00      	nop
        }
    }

    HAL_UART_Transmit(&huart2, (uint8_t *)"[ESP] CONNACK Response:\r\n", 25, HAL_MAX_DELAY);
 8000678:	f04f 33ff 	mov.w	r3, #4294967295
 800067c:	2219      	movs	r2, #25
 800067e:	4928      	ldr	r1, [pc, #160]	@ (8000720 <ESP_Init+0x444>)
 8000680:	4828      	ldr	r0, [pc, #160]	@ (8000724 <ESP_Init+0x448>)
 8000682:	f001 fbb1 	bl	8001de8 <HAL_UART_Transmit>
    for (uint16_t i = 0; i < index; i++) {
 8000686:	2300      	movs	r3, #0
 8000688:	f8a7 3172 	strh.w	r3, [r7, #370]	@ 0x172
 800068c:	e01c      	b.n	80006c8 <ESP_Init+0x3ec>
        char byte_msg[16];
        snprintf(byte_msg, sizeof(byte_msg), "0x%02X ", response[i]);
 800068e:	f8b7 3172 	ldrh.w	r3, [r7, #370]	@ 0x172
 8000692:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8000696:	f5a2 72a8 	sub.w	r2, r2, #336	@ 0x150
 800069a:	5cd3      	ldrb	r3, [r2, r3]
 800069c:	4638      	mov	r0, r7
 800069e:	4a22      	ldr	r2, [pc, #136]	@ (8000728 <ESP_Init+0x44c>)
 80006a0:	2110      	movs	r1, #16
 80006a2:	f002 fa53 	bl	8002b4c <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t *)byte_msg, strlen(byte_msg), HAL_MAX_DELAY);
 80006a6:	463b      	mov	r3, r7
 80006a8:	4618      	mov	r0, r3
 80006aa:	f7ff fd4f 	bl	800014c <strlen>
 80006ae:	4603      	mov	r3, r0
 80006b0:	b29a      	uxth	r2, r3
 80006b2:	4639      	mov	r1, r7
 80006b4:	f04f 33ff 	mov.w	r3, #4294967295
 80006b8:	481a      	ldr	r0, [pc, #104]	@ (8000724 <ESP_Init+0x448>)
 80006ba:	f001 fb95 	bl	8001de8 <HAL_UART_Transmit>
    for (uint16_t i = 0; i < index; i++) {
 80006be:	f8b7 3172 	ldrh.w	r3, [r7, #370]	@ 0x172
 80006c2:	3301      	adds	r3, #1
 80006c4:	f8a7 3172 	strh.w	r3, [r7, #370]	@ 0x172
 80006c8:	f8b7 2172 	ldrh.w	r2, [r7, #370]	@ 0x172
 80006cc:	f8b7 317c 	ldrh.w	r3, [r7, #380]	@ 0x17c
 80006d0:	429a      	cmp	r2, r3
 80006d2:	d3dc      	bcc.n	800068e <ESP_Init+0x3b2>
    }
    HAL_UART_Transmit(&huart2, (uint8_t *)"\r\n", 2, HAL_MAX_DELAY);
 80006d4:	f04f 33ff 	mov.w	r3, #4294967295
 80006d8:	2202      	movs	r2, #2
 80006da:	4914      	ldr	r1, [pc, #80]	@ (800072c <ESP_Init+0x450>)
 80006dc:	4811      	ldr	r0, [pc, #68]	@ (8000724 <ESP_Init+0x448>)
 80006de:	f001 fb83 	bl	8001de8 <HAL_UART_Transmit>

    // --- Step 5: Validate CONNACK content ---
    int valid = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
//            response[ipd_start + 2] == 0x00 && response[ipd_start + 3] == 0x00) {
//            valid = 1;
//        }
//    }

    valid = 1;
 80006e8:	2301      	movs	r3, #1
 80006ea:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    if (!valid) {
 80006ee:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d108      	bne.n	8000708 <ESP_Init+0x42c>
        HAL_UART_Transmit(&huart2, (uint8_t *)"[ESP] Invalid or Missing CONNACK\r\n", 33, HAL_MAX_DELAY);
 80006f6:	f04f 33ff 	mov.w	r3, #4294967295
 80006fa:	2221      	movs	r2, #33	@ 0x21
 80006fc:	490c      	ldr	r1, [pc, #48]	@ (8000730 <ESP_Init+0x454>)
 80006fe:	4809      	ldr	r0, [pc, #36]	@ (8000724 <ESP_Init+0x448>)
 8000700:	f001 fb72 	bl	8001de8 <HAL_UART_Transmit>
        Error_Handler();
 8000704:	f000 f910 	bl	8000928 <Error_Handler>
    }

    HAL_UART_Transmit(&huart2, (uint8_t *)"[ESP] MQTT Connected Successfully!\r\n", 36, HAL_MAX_DELAY);
 8000708:	f04f 33ff 	mov.w	r3, #4294967295
 800070c:	2224      	movs	r2, #36	@ 0x24
 800070e:	4909      	ldr	r1, [pc, #36]	@ (8000734 <ESP_Init+0x458>)
 8000710:	4804      	ldr	r0, [pc, #16]	@ (8000724 <ESP_Init+0x448>)
 8000712:	f001 fb69 	bl	8001de8 <HAL_UART_Transmit>
}
 8000716:	bf00      	nop
 8000718:	f507 77c0 	add.w	r7, r7, #384	@ 0x180
 800071c:	46bd      	mov	sp, r7
 800071e:	bdb0      	pop	{r4, r5, r7, pc}
 8000720:	08003700 	.word	0x08003700
 8000724:	200000c0 	.word	0x200000c0
 8000728:	080036c8 	.word	0x080036c8
 800072c:	080036d0 	.word	0x080036d0
 8000730:	0800371c 	.word	0x0800371c
 8000734:	08003740 	.word	0x08003740

08000738 <ESP_Subscribe>:
    ESP_SendAT(cipsendCmd, ">", 2000);
    HAL_UART_Transmit(&huart1, mqttPublish, sizeof(mqttPublish), HAL_MAX_DELAY);
}

void ESP_Subscribe(void)
{
 8000738:	b5b0      	push	{r4, r5, r7, lr}
 800073a:	b08a      	sub	sp, #40	@ 0x28
 800073c:	af00      	add	r7, sp, #0
    uint8_t mqttSubscribe[] = {
 800073e:	4b14      	ldr	r3, [pc, #80]	@ (8000790 <ESP_Subscribe+0x58>)
 8000740:	f107 0414 	add.w	r4, r7, #20
 8000744:	461d      	mov	r5, r3
 8000746:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000748:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800074a:	682b      	ldr	r3, [r5, #0]
 800074c:	6023      	str	r3, [r4, #0]
        's','t','m','3','2','/','t','e','s','t','1','2','3', // Topic
        0x00                   // QoS 0
    };

    char cipsendCmd[20];
    sprintf(cipsendCmd, "AT+CIPSEND=%d", sizeof(mqttSubscribe));
 800074e:	463b      	mov	r3, r7
 8000750:	2214      	movs	r2, #20
 8000752:	4910      	ldr	r1, [pc, #64]	@ (8000794 <ESP_Subscribe+0x5c>)
 8000754:	4618      	mov	r0, r3
 8000756:	f002 fa2f 	bl	8002bb8 <siprintf>
    ESP_SendAT(cipsendCmd, ">", 2000);
 800075a:	463b      	mov	r3, r7
 800075c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000760:	490d      	ldr	r1, [pc, #52]	@ (8000798 <ESP_Subscribe+0x60>)
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff fcfa 	bl	800015c <ESP_SendAT>
    HAL_UART_Transmit(&huart1, mqttSubscribe, sizeof(mqttSubscribe), HAL_MAX_DELAY);
 8000768:	f107 0114 	add.w	r1, r7, #20
 800076c:	f04f 33ff 	mov.w	r3, #4294967295
 8000770:	2214      	movs	r2, #20
 8000772:	480a      	ldr	r0, [pc, #40]	@ (800079c <ESP_Subscribe+0x64>)
 8000774:	f001 fb38 	bl	8001de8 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (uint8_t *)"[ESP] SUBSCRIBE sent\r\n", 22, HAL_MAX_DELAY);
 8000778:	f04f 33ff 	mov.w	r3, #4294967295
 800077c:	2216      	movs	r2, #22
 800077e:	4908      	ldr	r1, [pc, #32]	@ (80007a0 <ESP_Subscribe+0x68>)
 8000780:	4808      	ldr	r0, [pc, #32]	@ (80007a4 <ESP_Subscribe+0x6c>)
 8000782:	f001 fb31 	bl	8001de8 <HAL_UART_Transmit>
}
 8000786:	bf00      	nop
 8000788:	3728      	adds	r7, #40	@ 0x28
 800078a:	46bd      	mov	sp, r7
 800078c:	bdb0      	pop	{r4, r5, r7, pc}
 800078e:	bf00      	nop
 8000790:	080037ac 	.word	0x080037ac
 8000794:	0800368c 	.word	0x0800368c
 8000798:	0800369c 	.word	0x0800369c
 800079c:	20000078 	.word	0x20000078
 80007a0:	08003794 	.word	0x08003794
 80007a4:	200000c0 	.word	0x200000c0

080007a8 <HAL_UART_RxCpltCallback>:
        memset((void *)uart_rx_buffer, 0, UART_RX_BUFFER_SIZE);
    }
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a16      	ldr	r2, [pc, #88]	@ (8000810 <HAL_UART_RxCpltCallback+0x68>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d125      	bne.n	8000806 <HAL_UART_RxCpltCallback+0x5e>
    {
        // Echo the received byte to huart2 for debugging
        HAL_UART_Transmit(&huart2, (uint8_t *)&uart_rx_buffer[uart_rx_index], 1, HAL_MAX_DELAY);
 80007ba:	4b16      	ldr	r3, [pc, #88]	@ (8000814 <HAL_UART_RxCpltCallback+0x6c>)
 80007bc:	881b      	ldrh	r3, [r3, #0]
 80007be:	b29b      	uxth	r3, r3
 80007c0:	461a      	mov	r2, r3
 80007c2:	4b15      	ldr	r3, [pc, #84]	@ (8000818 <HAL_UART_RxCpltCallback+0x70>)
 80007c4:	18d1      	adds	r1, r2, r3
 80007c6:	f04f 33ff 	mov.w	r3, #4294967295
 80007ca:	2201      	movs	r2, #1
 80007cc:	4813      	ldr	r0, [pc, #76]	@ (800081c <HAL_UART_RxCpltCallback+0x74>)
 80007ce:	f001 fb0b 	bl	8001de8 <HAL_UART_Transmit>

        // Increment buffer index
        uart_rx_index++;
 80007d2:	4b10      	ldr	r3, [pc, #64]	@ (8000814 <HAL_UART_RxCpltCallback+0x6c>)
 80007d4:	881b      	ldrh	r3, [r3, #0]
 80007d6:	b29b      	uxth	r3, r3
 80007d8:	3301      	adds	r3, #1
 80007da:	b29a      	uxth	r2, r3
 80007dc:	4b0d      	ldr	r3, [pc, #52]	@ (8000814 <HAL_UART_RxCpltCallback+0x6c>)
 80007de:	801a      	strh	r2, [r3, #0]
        if (uart_rx_index >= UART_RX_BUFFER_SIZE - 1)
 80007e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000814 <HAL_UART_RxCpltCallback+0x6c>)
 80007e2:	881b      	ldrh	r3, [r3, #0]
 80007e4:	b29b      	uxth	r3, r3
 80007e6:	2bfe      	cmp	r3, #254	@ 0xfe
 80007e8:	d902      	bls.n	80007f0 <HAL_UART_RxCpltCallback+0x48>
        {
            uart_rx_index = 0; // Reset to prevent overflow
 80007ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000814 <HAL_UART_RxCpltCallback+0x6c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	801a      	strh	r2, [r3, #0]
        }

        // Re-enable UART receive interrupt
        HAL_UART_Receive_IT(&huart1, (uint8_t *)&uart_rx_buffer[uart_rx_index], 1);
 80007f0:	4b08      	ldr	r3, [pc, #32]	@ (8000814 <HAL_UART_RxCpltCallback+0x6c>)
 80007f2:	881b      	ldrh	r3, [r3, #0]
 80007f4:	b29b      	uxth	r3, r3
 80007f6:	461a      	mov	r2, r3
 80007f8:	4b07      	ldr	r3, [pc, #28]	@ (8000818 <HAL_UART_RxCpltCallback+0x70>)
 80007fa:	4413      	add	r3, r2
 80007fc:	2201      	movs	r2, #1
 80007fe:	4619      	mov	r1, r3
 8000800:	4807      	ldr	r0, [pc, #28]	@ (8000820 <HAL_UART_RxCpltCallback+0x78>)
 8000802:	f001 fc13 	bl	800202c <HAL_UART_Receive_IT>
    }
}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40013800 	.word	0x40013800
 8000814:	20000208 	.word	0x20000208
 8000818:	20000108 	.word	0x20000108
 800081c:	200000c0 	.word	0x200000c0
 8000820:	20000078 	.word	0x20000078

08000824 <main>:

// Main entry point
// Main entry point
int main(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b0a4      	sub	sp, #144	@ 0x90
 8000828:	af00      	add	r7, sp, #0
    HAL_Init();
 800082a:	f000 fab3 	bl	8000d94 <HAL_Init>
    SystemClock_Config();
 800082e:	f000 f88b 	bl	8000948 <SystemClock_Config>
    MX_GPIO_Init();
 8000832:	f000 f937 	bl	8000aa4 <MX_GPIO_Init>
    MX_USART1_UART_Init();
 8000836:	f000 f8ed 	bl	8000a14 <MX_USART1_UART_Init>
    MX_USART2_UART_Init();
 800083a:	f000 f90f 	bl	8000a5c <MX_USART2_UART_Init>

    HAL_UART_Transmit(&huart2, (uint8_t *)"[SYSTEM] Starting ESP8266 Setup...\r\n", 36, HAL_MAX_DELAY);
 800083e:	f04f 33ff 	mov.w	r3, #4294967295
 8000842:	2224      	movs	r2, #36	@ 0x24
 8000844:	4931      	ldr	r1, [pc, #196]	@ (800090c <main+0xe8>)
 8000846:	4832      	ldr	r0, [pc, #200]	@ (8000910 <main+0xec>)
 8000848:	f001 face 	bl	8001de8 <HAL_UART_Transmit>

    // Measure ESP_Init() execution time
    uint32_t start_time = HAL_GetTick();
 800084c:	f000 fafa 	bl	8000e44 <HAL_GetTick>
 8000850:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
    ESP_Init();
 8000854:	f7ff fd42 	bl	80002dc <ESP_Init>
    uint32_t end_time = HAL_GetTick();
 8000858:	f000 faf4 	bl	8000e44 <HAL_GetTick>
 800085c:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
    uint32_t init_duration = end_time - start_time;
 8000860:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8000864:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000868:	1ad3      	subs	r3, r2, r3
 800086a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    char init_time_msg[64];
    snprintf(init_time_msg, sizeof(init_time_msg), "[TIMING] ESP_Init() took %lu ms\r\n", init_duration);
 800086e:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8000872:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000876:	4a27      	ldr	r2, [pc, #156]	@ (8000914 <main+0xf0>)
 8000878:	2140      	movs	r1, #64	@ 0x40
 800087a:	f002 f967 	bl	8002b4c <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)init_time_msg, strlen(init_time_msg), HAL_MAX_DELAY);
 800087e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff fc62 	bl	800014c <strlen>
 8000888:	4603      	mov	r3, r0
 800088a:	b29a      	uxth	r2, r3
 800088c:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8000890:	f04f 33ff 	mov.w	r3, #4294967295
 8000894:	481e      	ldr	r0, [pc, #120]	@ (8000910 <main+0xec>)
 8000896:	f001 faa7 	bl	8001de8 <HAL_UART_Transmit>

    HAL_Delay(2000);
 800089a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800089e:	f000 fadb 	bl	8000e58 <HAL_Delay>

    // Measure ESP_PublishNumber() execution time
    start_time = HAL_GetTick();
 80008a2:	f000 facf 	bl	8000e44 <HAL_GetTick>
 80008a6:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
    HAL_UART_Receive_IT(&huart1, (uint8_t *)&uart_rx_buffer[uart_rx_index], 1);
 80008aa:	4b1b      	ldr	r3, [pc, #108]	@ (8000918 <main+0xf4>)
 80008ac:	881b      	ldrh	r3, [r3, #0]
 80008ae:	b29b      	uxth	r3, r3
 80008b0:	461a      	mov	r2, r3
 80008b2:	4b1a      	ldr	r3, [pc, #104]	@ (800091c <main+0xf8>)
 80008b4:	4413      	add	r3, r2
 80008b6:	2201      	movs	r2, #1
 80008b8:	4619      	mov	r1, r3
 80008ba:	4819      	ldr	r0, [pc, #100]	@ (8000920 <main+0xfc>)
 80008bc:	f001 fbb6 	bl	800202c <HAL_UART_Receive_IT>
    ESP_Subscribe();
 80008c0:	f7ff ff3a 	bl	8000738 <ESP_Subscribe>
    end_time = HAL_GetTick();
 80008c4:	f000 fabe 	bl	8000e44 <HAL_GetTick>
 80008c8:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
    uint32_t publish_duration = end_time - start_time;
 80008cc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80008d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80008d4:	1ad3      	subs	r3, r2, r3
 80008d6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    char publish_time_msg[64];
    snprintf(publish_time_msg, sizeof(publish_time_msg), "[TIMING] ESP_PublishNumber() took %lu ms\r\n", publish_duration);
 80008da:	4638      	mov	r0, r7
 80008dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80008e0:	4a10      	ldr	r2, [pc, #64]	@ (8000924 <main+0x100>)
 80008e2:	2140      	movs	r1, #64	@ 0x40
 80008e4:	f002 f932 	bl	8002b4c <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)publish_time_msg, strlen(publish_time_msg), HAL_MAX_DELAY);
 80008e8:	463b      	mov	r3, r7
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff fc2e 	bl	800014c <strlen>
 80008f0:	4603      	mov	r3, r0
 80008f2:	b29a      	uxth	r2, r3
 80008f4:	4639      	mov	r1, r7
 80008f6:	f04f 33ff 	mov.w	r3, #4294967295
 80008fa:	4805      	ldr	r0, [pc, #20]	@ (8000910 <main+0xec>)
 80008fc:	f001 fa74 	bl	8001de8 <HAL_UART_Transmit>
 8000900:	2300      	movs	r3, #0
        {
            Parse_MQTT_Message();
        }
    }
    */
}
 8000902:	4618      	mov	r0, r3
 8000904:	3790      	adds	r7, #144	@ 0x90
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	080037f8 	.word	0x080037f8
 8000910:	200000c0 	.word	0x200000c0
 8000914:	08003820 	.word	0x08003820
 8000918:	20000208 	.word	0x20000208
 800091c:	20000108 	.word	0x20000108
 8000920:	20000078 	.word	0x20000078
 8000924:	08003844 	.word	0x08003844

08000928 <Error_Handler>:

// Error handler
void Error_Handler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
    HAL_UART_Transmit(&huart2, (uint8_t *)"\n[FATAL ERROR] Halting system.\r\n", 32, HAL_MAX_DELAY);
 800092c:	f04f 33ff 	mov.w	r3, #4294967295
 8000930:	2220      	movs	r2, #32
 8000932:	4903      	ldr	r1, [pc, #12]	@ (8000940 <Error_Handler+0x18>)
 8000934:	4803      	ldr	r0, [pc, #12]	@ (8000944 <Error_Handler+0x1c>)
 8000936:	f001 fa57 	bl	8001de8 <HAL_UART_Transmit>
    while (1)
 800093a:	bf00      	nop
 800093c:	e7fd      	b.n	800093a <Error_Handler+0x12>
 800093e:	bf00      	nop
 8000940:	08003870 	.word	0x08003870
 8000944:	200000c0 	.word	0x200000c0

08000948 <SystemClock_Config>:
    }
}

/* HAL Init Functions */
void SystemClock_Config(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b092      	sub	sp, #72	@ 0x48
 800094c:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	2228      	movs	r2, #40	@ 0x28
 8000954:	2100      	movs	r1, #0
 8000956:	4618      	mov	r0, r3
 8000958:	f002 f97a 	bl	8002c50 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800095c:	f107 0308 	add.w	r3, r7, #8
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
 800096a:	611a      	str	r2, [r3, #16]
    __HAL_RCC_AFIO_CLK_ENABLE();
 800096c:	4b27      	ldr	r3, [pc, #156]	@ (8000a0c <SystemClock_Config+0xc4>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	4a26      	ldr	r2, [pc, #152]	@ (8000a0c <SystemClock_Config+0xc4>)
 8000972:	f043 0301 	orr.w	r3, r3, #1
 8000976:	6193      	str	r3, [r2, #24]
 8000978:	4b24      	ldr	r3, [pc, #144]	@ (8000a0c <SystemClock_Config+0xc4>)
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	f003 0301 	and.w	r3, r3, #1
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_PWR_CLK_ENABLE();
 8000984:	4b21      	ldr	r3, [pc, #132]	@ (8000a0c <SystemClock_Config+0xc4>)
 8000986:	69db      	ldr	r3, [r3, #28]
 8000988:	4a20      	ldr	r2, [pc, #128]	@ (8000a0c <SystemClock_Config+0xc4>)
 800098a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800098e:	61d3      	str	r3, [r2, #28]
 8000990:	4b1e      	ldr	r3, [pc, #120]	@ (8000a0c <SystemClock_Config+0xc4>)
 8000992:	69db      	ldr	r3, [r3, #28]
 8000994:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000998:	603b      	str	r3, [r7, #0]
 800099a:	683b      	ldr	r3, [r7, #0]
    __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800099c:	4b1c      	ldr	r3, [pc, #112]	@ (8000a10 <SystemClock_Config+0xc8>)
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80009a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80009a4:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80009a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80009aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80009ac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80009b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80009b2:	4a17      	ldr	r2, [pc, #92]	@ (8000a10 <SystemClock_Config+0xc8>)
 80009b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80009b6:	6053      	str	r3, [r2, #4]
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009b8:	2301      	movs	r3, #1
 80009ba:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009c0:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009c6:	2302      	movs	r3, #2
 80009c8:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009ca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80009d0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80009d4:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80009d6:	f107 031c 	add.w	r3, r7, #28
 80009da:	4618      	mov	r0, r3
 80009dc:	f000 fda4 	bl	8001528 <HAL_RCC_OscConfig>
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 80009e0:	230f      	movs	r3, #15
 80009e2:	60bb      	str	r3, [r7, #8]
                                  RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009e4:	2302      	movs	r3, #2
 80009e6:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009e8:	2300      	movs	r3, #0
 80009ea:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009f0:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009f2:	2300      	movs	r3, #0
 80009f4:	61bb      	str	r3, [r7, #24]
    HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 80009f6:	f107 0308 	add.w	r3, r7, #8
 80009fa:	2102      	movs	r1, #2
 80009fc:	4618      	mov	r0, r3
 80009fe:	f001 f815 	bl	8001a2c <HAL_RCC_ClockConfig>
}
 8000a02:	bf00      	nop
 8000a04:	3748      	adds	r7, #72	@ 0x48
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40021000 	.word	0x40021000
 8000a10:	40010000 	.word	0x40010000

08000a14 <MX_USART1_UART_Init>:

void MX_USART1_UART_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
    huart1.Instance = USART1;
 8000a18:	4b0e      	ldr	r3, [pc, #56]	@ (8000a54 <MX_USART1_UART_Init+0x40>)
 8000a1a:	4a0f      	ldr	r2, [pc, #60]	@ (8000a58 <MX_USART1_UART_Init+0x44>)
 8000a1c:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 8000a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a54 <MX_USART1_UART_Init+0x40>)
 8000a20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a24:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a26:	4b0b      	ldr	r3, [pc, #44]	@ (8000a54 <MX_USART1_UART_Init+0x40>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8000a2c:	4b09      	ldr	r3, [pc, #36]	@ (8000a54 <MX_USART1_UART_Init+0x40>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8000a32:	4b08      	ldr	r3, [pc, #32]	@ (8000a54 <MX_USART1_UART_Init+0x40>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8000a38:	4b06      	ldr	r3, [pc, #24]	@ (8000a54 <MX_USART1_UART_Init+0x40>)
 8000a3a:	220c      	movs	r2, #12
 8000a3c:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a3e:	4b05      	ldr	r3, [pc, #20]	@ (8000a54 <MX_USART1_UART_Init+0x40>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a44:	4b03      	ldr	r3, [pc, #12]	@ (8000a54 <MX_USART1_UART_Init+0x40>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	61da      	str	r2, [r3, #28]
    HAL_UART_Init(&huart1);
 8000a4a:	4802      	ldr	r0, [pc, #8]	@ (8000a54 <MX_USART1_UART_Init+0x40>)
 8000a4c:	f001 f97c 	bl	8001d48 <HAL_UART_Init>
}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20000078 	.word	0x20000078
 8000a58:	40013800 	.word	0x40013800

08000a5c <MX_USART2_UART_Init>:

void MX_USART2_UART_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
    huart2.Instance = USART2;
 8000a60:	4b0e      	ldr	r3, [pc, #56]	@ (8000a9c <MX_USART2_UART_Init+0x40>)
 8000a62:	4a0f      	ldr	r2, [pc, #60]	@ (8000aa0 <MX_USART2_UART_Init+0x44>)
 8000a64:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 8000a66:	4b0d      	ldr	r3, [pc, #52]	@ (8000a9c <MX_USART2_UART_Init+0x40>)
 8000a68:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a6c:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a9c <MX_USART2_UART_Init+0x40>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8000a74:	4b09      	ldr	r3, [pc, #36]	@ (8000a9c <MX_USART2_UART_Init+0x40>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8000a7a:	4b08      	ldr	r3, [pc, #32]	@ (8000a9c <MX_USART2_UART_Init+0x40>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8000a80:	4b06      	ldr	r3, [pc, #24]	@ (8000a9c <MX_USART2_UART_Init+0x40>)
 8000a82:	220c      	movs	r2, #12
 8000a84:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a86:	4b05      	ldr	r3, [pc, #20]	@ (8000a9c <MX_USART2_UART_Init+0x40>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a8c:	4b03      	ldr	r3, [pc, #12]	@ (8000a9c <MX_USART2_UART_Init+0x40>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	61da      	str	r2, [r3, #28]
    HAL_UART_Init(&huart2);
 8000a92:	4802      	ldr	r0, [pc, #8]	@ (8000a9c <MX_USART2_UART_Init+0x40>)
 8000a94:	f001 f958 	bl	8001d48 <HAL_UART_Init>
}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	200000c0 	.word	0x200000c0
 8000aa0:	40004400 	.word	0x40004400

08000aa4 <MX_GPIO_Init>:

void MX_GPIO_Init(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae4 <MX_GPIO_Init+0x40>)
 8000aac:	699b      	ldr	r3, [r3, #24]
 8000aae:	4a0d      	ldr	r2, [pc, #52]	@ (8000ae4 <MX_GPIO_Init+0x40>)
 8000ab0:	f043 0304 	orr.w	r3, r3, #4
 8000ab4:	6193      	str	r3, [r2, #24]
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae4 <MX_GPIO_Init+0x40>)
 8000ab8:	699b      	ldr	r3, [r3, #24]
 8000aba:	f003 0304 	and.w	r3, r3, #4
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac2:	4b08      	ldr	r3, [pc, #32]	@ (8000ae4 <MX_GPIO_Init+0x40>)
 8000ac4:	699b      	ldr	r3, [r3, #24]
 8000ac6:	4a07      	ldr	r2, [pc, #28]	@ (8000ae4 <MX_GPIO_Init+0x40>)
 8000ac8:	f043 0308 	orr.w	r3, r3, #8
 8000acc:	6193      	str	r3, [r2, #24]
 8000ace:	4b05      	ldr	r3, [pc, #20]	@ (8000ae4 <MX_GPIO_Init+0x40>)
 8000ad0:	699b      	ldr	r3, [r3, #24]
 8000ad2:	f003 0308 	and.w	r3, r3, #8
 8000ad6:	603b      	str	r3, [r7, #0]
 8000ad8:	683b      	ldr	r3, [r7, #0]
}
 8000ada:	bf00      	nop
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr
 8000ae4:	40021000 	.word	0x40021000

08000ae8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b085      	sub	sp, #20
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000aee:	4b15      	ldr	r3, [pc, #84]	@ (8000b44 <HAL_MspInit+0x5c>)
 8000af0:	699b      	ldr	r3, [r3, #24]
 8000af2:	4a14      	ldr	r2, [pc, #80]	@ (8000b44 <HAL_MspInit+0x5c>)
 8000af4:	f043 0301 	orr.w	r3, r3, #1
 8000af8:	6193      	str	r3, [r2, #24]
 8000afa:	4b12      	ldr	r3, [pc, #72]	@ (8000b44 <HAL_MspInit+0x5c>)
 8000afc:	699b      	ldr	r3, [r3, #24]
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	60bb      	str	r3, [r7, #8]
 8000b04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b06:	4b0f      	ldr	r3, [pc, #60]	@ (8000b44 <HAL_MspInit+0x5c>)
 8000b08:	69db      	ldr	r3, [r3, #28]
 8000b0a:	4a0e      	ldr	r2, [pc, #56]	@ (8000b44 <HAL_MspInit+0x5c>)
 8000b0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b10:	61d3      	str	r3, [r2, #28]
 8000b12:	4b0c      	ldr	r3, [pc, #48]	@ (8000b44 <HAL_MspInit+0x5c>)
 8000b14:	69db      	ldr	r3, [r3, #28]
 8000b16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b48 <HAL_MspInit+0x60>)
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	4a04      	ldr	r2, [pc, #16]	@ (8000b48 <HAL_MspInit+0x60>)
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	3714      	adds	r7, #20
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr
 8000b44:	40021000 	.word	0x40021000
 8000b48:	40010000 	.word	0x40010000

08000b4c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08a      	sub	sp, #40	@ 0x28
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b54:	f107 0318 	add.w	r3, r7, #24
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a3b      	ldr	r2, [pc, #236]	@ (8000c54 <HAL_UART_MspInit+0x108>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d13a      	bne.n	8000be2 <HAL_UART_MspInit+0x96>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b6c:	4b3a      	ldr	r3, [pc, #232]	@ (8000c58 <HAL_UART_MspInit+0x10c>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	4a39      	ldr	r2, [pc, #228]	@ (8000c58 <HAL_UART_MspInit+0x10c>)
 8000b72:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b76:	6193      	str	r3, [r2, #24]
 8000b78:	4b37      	ldr	r3, [pc, #220]	@ (8000c58 <HAL_UART_MspInit+0x10c>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b80:	617b      	str	r3, [r7, #20]
 8000b82:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b84:	4b34      	ldr	r3, [pc, #208]	@ (8000c58 <HAL_UART_MspInit+0x10c>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	4a33      	ldr	r2, [pc, #204]	@ (8000c58 <HAL_UART_MspInit+0x10c>)
 8000b8a:	f043 0304 	orr.w	r3, r3, #4
 8000b8e:	6193      	str	r3, [r2, #24]
 8000b90:	4b31      	ldr	r3, [pc, #196]	@ (8000c58 <HAL_UART_MspInit+0x10c>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	f003 0304 	and.w	r3, r3, #4
 8000b98:	613b      	str	r3, [r7, #16]
 8000b9a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b9c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ba0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000baa:	f107 0318 	add.w	r3, r7, #24
 8000bae:	4619      	mov	r1, r3
 8000bb0:	482a      	ldr	r0, [pc, #168]	@ (8000c5c <HAL_UART_MspInit+0x110>)
 8000bb2:	f000 fb35 	bl	8001220 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000bb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc4:	f107 0318 	add.w	r3, r7, #24
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4824      	ldr	r0, [pc, #144]	@ (8000c5c <HAL_UART_MspInit+0x110>)
 8000bcc:	f000 fb28 	bl	8001220 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	2025      	movs	r0, #37	@ 0x25
 8000bd6:	f000 fa3a 	bl	800104e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000bda:	2025      	movs	r0, #37	@ 0x25
 8000bdc:	f000 fa53 	bl	8001086 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8000be0:	e034      	b.n	8000c4c <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a1e      	ldr	r2, [pc, #120]	@ (8000c60 <HAL_UART_MspInit+0x114>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d12f      	bne.n	8000c4c <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bec:	4b1a      	ldr	r3, [pc, #104]	@ (8000c58 <HAL_UART_MspInit+0x10c>)
 8000bee:	69db      	ldr	r3, [r3, #28]
 8000bf0:	4a19      	ldr	r2, [pc, #100]	@ (8000c58 <HAL_UART_MspInit+0x10c>)
 8000bf2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bf6:	61d3      	str	r3, [r2, #28]
 8000bf8:	4b17      	ldr	r3, [pc, #92]	@ (8000c58 <HAL_UART_MspInit+0x10c>)
 8000bfa:	69db      	ldr	r3, [r3, #28]
 8000bfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c04:	4b14      	ldr	r3, [pc, #80]	@ (8000c58 <HAL_UART_MspInit+0x10c>)
 8000c06:	699b      	ldr	r3, [r3, #24]
 8000c08:	4a13      	ldr	r2, [pc, #76]	@ (8000c58 <HAL_UART_MspInit+0x10c>)
 8000c0a:	f043 0304 	orr.w	r3, r3, #4
 8000c0e:	6193      	str	r3, [r2, #24]
 8000c10:	4b11      	ldr	r3, [pc, #68]	@ (8000c58 <HAL_UART_MspInit+0x10c>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	f003 0304 	and.w	r3, r3, #4
 8000c18:	60bb      	str	r3, [r7, #8]
 8000c1a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c1c:	2304      	movs	r3, #4
 8000c1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c20:	2302      	movs	r3, #2
 8000c22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c24:	2303      	movs	r3, #3
 8000c26:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c28:	f107 0318 	add.w	r3, r7, #24
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	480b      	ldr	r0, [pc, #44]	@ (8000c5c <HAL_UART_MspInit+0x110>)
 8000c30:	f000 faf6 	bl	8001220 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c34:	2308      	movs	r3, #8
 8000c36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c40:	f107 0318 	add.w	r3, r7, #24
 8000c44:	4619      	mov	r1, r3
 8000c46:	4805      	ldr	r0, [pc, #20]	@ (8000c5c <HAL_UART_MspInit+0x110>)
 8000c48:	f000 faea 	bl	8001220 <HAL_GPIO_Init>
}
 8000c4c:	bf00      	nop
 8000c4e:	3728      	adds	r7, #40	@ 0x28
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40013800 	.word	0x40013800
 8000c58:	40021000 	.word	0x40021000
 8000c5c:	40010800 	.word	0x40010800
 8000c60:	40004400 	.word	0x40004400

08000c64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c68:	bf00      	nop
 8000c6a:	e7fd      	b.n	8000c68 <NMI_Handler+0x4>

08000c6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c70:	bf00      	nop
 8000c72:	e7fd      	b.n	8000c70 <HardFault_Handler+0x4>

08000c74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c78:	bf00      	nop
 8000c7a:	e7fd      	b.n	8000c78 <MemManage_Handler+0x4>

08000c7c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c80:	bf00      	nop
 8000c82:	e7fd      	b.n	8000c80 <BusFault_Handler+0x4>

08000c84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c88:	bf00      	nop
 8000c8a:	e7fd      	b.n	8000c88 <UsageFault_Handler+0x4>

08000c8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bc80      	pop	{r7}
 8000c96:	4770      	bx	lr

08000c98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bc80      	pop	{r7}
 8000ca2:	4770      	bx	lr

08000ca4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bc80      	pop	{r7}
 8000cae:	4770      	bx	lr

08000cb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cb4:	f000 f8b4 	bl	8000e20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cb8:	bf00      	nop
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000cc0:	4802      	ldr	r0, [pc, #8]	@ (8000ccc <USART1_IRQHandler+0x10>)
 8000cc2:	f001 f9d9 	bl	8002078 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000078 	.word	0x20000078

08000cd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cd8:	4a14      	ldr	r2, [pc, #80]	@ (8000d2c <_sbrk+0x5c>)
 8000cda:	4b15      	ldr	r3, [pc, #84]	@ (8000d30 <_sbrk+0x60>)
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ce4:	4b13      	ldr	r3, [pc, #76]	@ (8000d34 <_sbrk+0x64>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d102      	bne.n	8000cf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cec:	4b11      	ldr	r3, [pc, #68]	@ (8000d34 <_sbrk+0x64>)
 8000cee:	4a12      	ldr	r2, [pc, #72]	@ (8000d38 <_sbrk+0x68>)
 8000cf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cf2:	4b10      	ldr	r3, [pc, #64]	@ (8000d34 <_sbrk+0x64>)
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d207      	bcs.n	8000d10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d00:	f001 ffc4 	bl	8002c8c <__errno>
 8000d04:	4603      	mov	r3, r0
 8000d06:	220c      	movs	r2, #12
 8000d08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0e:	e009      	b.n	8000d24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d10:	4b08      	ldr	r3, [pc, #32]	@ (8000d34 <_sbrk+0x64>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d16:	4b07      	ldr	r3, [pc, #28]	@ (8000d34 <_sbrk+0x64>)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	4a05      	ldr	r2, [pc, #20]	@ (8000d34 <_sbrk+0x64>)
 8000d20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d22:	68fb      	ldr	r3, [r7, #12]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3718      	adds	r7, #24
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20005000 	.word	0x20005000
 8000d30:	00000400 	.word	0x00000400
 8000d34:	2000040c 	.word	0x2000040c
 8000d38:	20000560 	.word	0x20000560

08000d3c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr

08000d48 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d48:	f7ff fff8 	bl	8000d3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d4c:	480b      	ldr	r0, [pc, #44]	@ (8000d7c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d4e:	490c      	ldr	r1, [pc, #48]	@ (8000d80 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d50:	4a0c      	ldr	r2, [pc, #48]	@ (8000d84 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d54:	e002      	b.n	8000d5c <LoopCopyDataInit>

08000d56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d5a:	3304      	adds	r3, #4

08000d5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d60:	d3f9      	bcc.n	8000d56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d62:	4a09      	ldr	r2, [pc, #36]	@ (8000d88 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d64:	4c09      	ldr	r4, [pc, #36]	@ (8000d8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d68:	e001      	b.n	8000d6e <LoopFillZerobss>

08000d6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d6c:	3204      	adds	r2, #4

08000d6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d70:	d3fb      	bcc.n	8000d6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d72:	f001 ff91 	bl	8002c98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d76:	f7ff fd55 	bl	8000824 <main>
  bx lr
 8000d7a:	4770      	bx	lr
  ldr r0, =_sdata
 8000d7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d80:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000d84:	08003904 	.word	0x08003904
  ldr r2, =_sbss
 8000d88:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000d8c:	2000055c 	.word	0x2000055c

08000d90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d90:	e7fe      	b.n	8000d90 <ADC1_2_IRQHandler>
	...

08000d94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d98:	4b08      	ldr	r3, [pc, #32]	@ (8000dbc <HAL_Init+0x28>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a07      	ldr	r2, [pc, #28]	@ (8000dbc <HAL_Init+0x28>)
 8000d9e:	f043 0310 	orr.w	r3, r3, #16
 8000da2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000da4:	2003      	movs	r0, #3
 8000da6:	f000 f947 	bl	8001038 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000daa:	200f      	movs	r0, #15
 8000dac:	f000 f808 	bl	8000dc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000db0:	f7ff fe9a 	bl	8000ae8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40022000 	.word	0x40022000

08000dc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dc8:	4b12      	ldr	r3, [pc, #72]	@ (8000e14 <HAL_InitTick+0x54>)
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	4b12      	ldr	r3, [pc, #72]	@ (8000e18 <HAL_InitTick+0x58>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dde:	4618      	mov	r0, r3
 8000de0:	f000 f95f 	bl	80010a2 <HAL_SYSTICK_Config>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e00e      	b.n	8000e0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2b0f      	cmp	r3, #15
 8000df2:	d80a      	bhi.n	8000e0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000df4:	2200      	movs	r2, #0
 8000df6:	6879      	ldr	r1, [r7, #4]
 8000df8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dfc:	f000 f927 	bl	800104e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e00:	4a06      	ldr	r2, [pc, #24]	@ (8000e1c <HAL_InitTick+0x5c>)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e06:	2300      	movs	r3, #0
 8000e08:	e000      	b.n	8000e0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000000 	.word	0x20000000
 8000e18:	20000008 	.word	0x20000008
 8000e1c:	20000004 	.word	0x20000004

08000e20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e24:	4b05      	ldr	r3, [pc, #20]	@ (8000e3c <HAL_IncTick+0x1c>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4b05      	ldr	r3, [pc, #20]	@ (8000e40 <HAL_IncTick+0x20>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4413      	add	r3, r2
 8000e30:	4a03      	ldr	r2, [pc, #12]	@ (8000e40 <HAL_IncTick+0x20>)
 8000e32:	6013      	str	r3, [r2, #0]
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bc80      	pop	{r7}
 8000e3a:	4770      	bx	lr
 8000e3c:	20000008 	.word	0x20000008
 8000e40:	20000410 	.word	0x20000410

08000e44 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  return uwTick;
 8000e48:	4b02      	ldr	r3, [pc, #8]	@ (8000e54 <HAL_GetTick+0x10>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr
 8000e54:	20000410 	.word	0x20000410

08000e58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e60:	f7ff fff0 	bl	8000e44 <HAL_GetTick>
 8000e64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e70:	d005      	beq.n	8000e7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e72:	4b0a      	ldr	r3, [pc, #40]	@ (8000e9c <HAL_Delay+0x44>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	461a      	mov	r2, r3
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e7e:	bf00      	nop
 8000e80:	f7ff ffe0 	bl	8000e44 <HAL_GetTick>
 8000e84:	4602      	mov	r2, r0
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	68fa      	ldr	r2, [r7, #12]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d8f7      	bhi.n	8000e80 <HAL_Delay+0x28>
  {
  }
}
 8000e90:	bf00      	nop
 8000e92:	bf00      	nop
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20000008 	.word	0x20000008

08000ea0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eb6:	68ba      	ldr	r2, [r7, #8]
 8000eb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ec8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ecc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ed0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ed2:	4a04      	ldr	r2, [pc, #16]	@ (8000ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	60d3      	str	r3, [r2, #12]
}
 8000ed8:	bf00      	nop
 8000eda:	3714      	adds	r7, #20
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bc80      	pop	{r7}
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eec:	4b04      	ldr	r3, [pc, #16]	@ (8000f00 <__NVIC_GetPriorityGrouping+0x18>)
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	0a1b      	lsrs	r3, r3, #8
 8000ef2:	f003 0307 	and.w	r3, r3, #7
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bc80      	pop	{r7}
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	db0b      	blt.n	8000f2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	f003 021f 	and.w	r2, r3, #31
 8000f1c:	4906      	ldr	r1, [pc, #24]	@ (8000f38 <__NVIC_EnableIRQ+0x34>)
 8000f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f22:	095b      	lsrs	r3, r3, #5
 8000f24:	2001      	movs	r0, #1
 8000f26:	fa00 f202 	lsl.w	r2, r0, r2
 8000f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f2e:	bf00      	nop
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bc80      	pop	{r7}
 8000f36:	4770      	bx	lr
 8000f38:	e000e100 	.word	0xe000e100

08000f3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	6039      	str	r1, [r7, #0]
 8000f46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	db0a      	blt.n	8000f66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	490c      	ldr	r1, [pc, #48]	@ (8000f88 <__NVIC_SetPriority+0x4c>)
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	0112      	lsls	r2, r2, #4
 8000f5c:	b2d2      	uxtb	r2, r2
 8000f5e:	440b      	add	r3, r1
 8000f60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f64:	e00a      	b.n	8000f7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	b2da      	uxtb	r2, r3
 8000f6a:	4908      	ldr	r1, [pc, #32]	@ (8000f8c <__NVIC_SetPriority+0x50>)
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	f003 030f 	and.w	r3, r3, #15
 8000f72:	3b04      	subs	r3, #4
 8000f74:	0112      	lsls	r2, r2, #4
 8000f76:	b2d2      	uxtb	r2, r2
 8000f78:	440b      	add	r3, r1
 8000f7a:	761a      	strb	r2, [r3, #24]
}
 8000f7c:	bf00      	nop
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bc80      	pop	{r7}
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	e000e100 	.word	0xe000e100
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b089      	sub	sp, #36	@ 0x24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	f1c3 0307 	rsb	r3, r3, #7
 8000faa:	2b04      	cmp	r3, #4
 8000fac:	bf28      	it	cs
 8000fae:	2304      	movcs	r3, #4
 8000fb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	3304      	adds	r3, #4
 8000fb6:	2b06      	cmp	r3, #6
 8000fb8:	d902      	bls.n	8000fc0 <NVIC_EncodePriority+0x30>
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	3b03      	subs	r3, #3
 8000fbe:	e000      	b.n	8000fc2 <NVIC_EncodePriority+0x32>
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	43da      	mvns	r2, r3
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	401a      	ands	r2, r3
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe2:	43d9      	mvns	r1, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe8:	4313      	orrs	r3, r2
         );
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3724      	adds	r7, #36	@ 0x24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr

08000ff4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3b01      	subs	r3, #1
 8001000:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001004:	d301      	bcc.n	800100a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001006:	2301      	movs	r3, #1
 8001008:	e00f      	b.n	800102a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800100a:	4a0a      	ldr	r2, [pc, #40]	@ (8001034 <SysTick_Config+0x40>)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	3b01      	subs	r3, #1
 8001010:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001012:	210f      	movs	r1, #15
 8001014:	f04f 30ff 	mov.w	r0, #4294967295
 8001018:	f7ff ff90 	bl	8000f3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800101c:	4b05      	ldr	r3, [pc, #20]	@ (8001034 <SysTick_Config+0x40>)
 800101e:	2200      	movs	r2, #0
 8001020:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001022:	4b04      	ldr	r3, [pc, #16]	@ (8001034 <SysTick_Config+0x40>)
 8001024:	2207      	movs	r2, #7
 8001026:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001028:	2300      	movs	r3, #0
}
 800102a:	4618      	mov	r0, r3
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	e000e010 	.word	0xe000e010

08001038 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f7ff ff2d 	bl	8000ea0 <__NVIC_SetPriorityGrouping>
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800104e:	b580      	push	{r7, lr}
 8001050:	b086      	sub	sp, #24
 8001052:	af00      	add	r7, sp, #0
 8001054:	4603      	mov	r3, r0
 8001056:	60b9      	str	r1, [r7, #8]
 8001058:	607a      	str	r2, [r7, #4]
 800105a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800105c:	2300      	movs	r3, #0
 800105e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001060:	f7ff ff42 	bl	8000ee8 <__NVIC_GetPriorityGrouping>
 8001064:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	68b9      	ldr	r1, [r7, #8]
 800106a:	6978      	ldr	r0, [r7, #20]
 800106c:	f7ff ff90 	bl	8000f90 <NVIC_EncodePriority>
 8001070:	4602      	mov	r2, r0
 8001072:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001076:	4611      	mov	r1, r2
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff ff5f 	bl	8000f3c <__NVIC_SetPriority>
}
 800107e:	bf00      	nop
 8001080:	3718      	adds	r7, #24
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	b082      	sub	sp, #8
 800108a:	af00      	add	r7, sp, #0
 800108c:	4603      	mov	r3, r0
 800108e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff ff35 	bl	8000f04 <__NVIC_EnableIRQ>
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b082      	sub	sp, #8
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f7ff ffa2 	bl	8000ff4 <SysTick_Config>
 80010b0:	4603      	mov	r3, r0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010ba:	b480      	push	{r7}
 80010bc:	b085      	sub	sp, #20
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010c2:	2300      	movs	r3, #0
 80010c4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d008      	beq.n	80010e4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2204      	movs	r2, #4
 80010d6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2200      	movs	r2, #0
 80010dc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	e020      	b.n	8001126 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f022 020e 	bic.w	r2, r2, #14
 80010f2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f022 0201 	bic.w	r2, r2, #1
 8001102:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800110c:	2101      	movs	r1, #1
 800110e:	fa01 f202 	lsl.w	r2, r1, r2
 8001112:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2201      	movs	r2, #1
 8001118:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2200      	movs	r2, #0
 8001120:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001124:	7bfb      	ldrb	r3, [r7, #15]
}
 8001126:	4618      	mov	r0, r3
 8001128:	3714      	adds	r7, #20
 800112a:	46bd      	mov	sp, r7
 800112c:	bc80      	pop	{r7}
 800112e:	4770      	bx	lr

08001130 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001138:	2300      	movs	r3, #0
 800113a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001142:	b2db      	uxtb	r3, r3
 8001144:	2b02      	cmp	r3, #2
 8001146:	d005      	beq.n	8001154 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2204      	movs	r2, #4
 800114c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	73fb      	strb	r3, [r7, #15]
 8001152:	e051      	b.n	80011f8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f022 020e 	bic.w	r2, r2, #14
 8001162:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f022 0201 	bic.w	r2, r2, #1
 8001172:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a22      	ldr	r2, [pc, #136]	@ (8001204 <HAL_DMA_Abort_IT+0xd4>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d029      	beq.n	80011d2 <HAL_DMA_Abort_IT+0xa2>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a21      	ldr	r2, [pc, #132]	@ (8001208 <HAL_DMA_Abort_IT+0xd8>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d022      	beq.n	80011ce <HAL_DMA_Abort_IT+0x9e>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a1f      	ldr	r2, [pc, #124]	@ (800120c <HAL_DMA_Abort_IT+0xdc>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d01a      	beq.n	80011c8 <HAL_DMA_Abort_IT+0x98>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a1e      	ldr	r2, [pc, #120]	@ (8001210 <HAL_DMA_Abort_IT+0xe0>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d012      	beq.n	80011c2 <HAL_DMA_Abort_IT+0x92>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a1c      	ldr	r2, [pc, #112]	@ (8001214 <HAL_DMA_Abort_IT+0xe4>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d00a      	beq.n	80011bc <HAL_DMA_Abort_IT+0x8c>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a1b      	ldr	r2, [pc, #108]	@ (8001218 <HAL_DMA_Abort_IT+0xe8>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d102      	bne.n	80011b6 <HAL_DMA_Abort_IT+0x86>
 80011b0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80011b4:	e00e      	b.n	80011d4 <HAL_DMA_Abort_IT+0xa4>
 80011b6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80011ba:	e00b      	b.n	80011d4 <HAL_DMA_Abort_IT+0xa4>
 80011bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011c0:	e008      	b.n	80011d4 <HAL_DMA_Abort_IT+0xa4>
 80011c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011c6:	e005      	b.n	80011d4 <HAL_DMA_Abort_IT+0xa4>
 80011c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011cc:	e002      	b.n	80011d4 <HAL_DMA_Abort_IT+0xa4>
 80011ce:	2310      	movs	r3, #16
 80011d0:	e000      	b.n	80011d4 <HAL_DMA_Abort_IT+0xa4>
 80011d2:	2301      	movs	r3, #1
 80011d4:	4a11      	ldr	r2, [pc, #68]	@ (800121c <HAL_DMA_Abort_IT+0xec>)
 80011d6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2201      	movs	r2, #1
 80011dc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2200      	movs	r2, #0
 80011e4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d003      	beq.n	80011f8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	4798      	blx	r3
    } 
  }
  return status;
 80011f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40020008 	.word	0x40020008
 8001208:	4002001c 	.word	0x4002001c
 800120c:	40020030 	.word	0x40020030
 8001210:	40020044 	.word	0x40020044
 8001214:	40020058 	.word	0x40020058
 8001218:	4002006c 	.word	0x4002006c
 800121c:	40020000 	.word	0x40020000

08001220 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001220:	b480      	push	{r7}
 8001222:	b08b      	sub	sp, #44	@ 0x2c
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800122a:	2300      	movs	r3, #0
 800122c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800122e:	2300      	movs	r3, #0
 8001230:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001232:	e169      	b.n	8001508 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001234:	2201      	movs	r2, #1
 8001236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	69fa      	ldr	r2, [r7, #28]
 8001244:	4013      	ands	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	429a      	cmp	r2, r3
 800124e:	f040 8158 	bne.w	8001502 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	4a9a      	ldr	r2, [pc, #616]	@ (80014c0 <HAL_GPIO_Init+0x2a0>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d05e      	beq.n	800131a <HAL_GPIO_Init+0xfa>
 800125c:	4a98      	ldr	r2, [pc, #608]	@ (80014c0 <HAL_GPIO_Init+0x2a0>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d875      	bhi.n	800134e <HAL_GPIO_Init+0x12e>
 8001262:	4a98      	ldr	r2, [pc, #608]	@ (80014c4 <HAL_GPIO_Init+0x2a4>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d058      	beq.n	800131a <HAL_GPIO_Init+0xfa>
 8001268:	4a96      	ldr	r2, [pc, #600]	@ (80014c4 <HAL_GPIO_Init+0x2a4>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d86f      	bhi.n	800134e <HAL_GPIO_Init+0x12e>
 800126e:	4a96      	ldr	r2, [pc, #600]	@ (80014c8 <HAL_GPIO_Init+0x2a8>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d052      	beq.n	800131a <HAL_GPIO_Init+0xfa>
 8001274:	4a94      	ldr	r2, [pc, #592]	@ (80014c8 <HAL_GPIO_Init+0x2a8>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d869      	bhi.n	800134e <HAL_GPIO_Init+0x12e>
 800127a:	4a94      	ldr	r2, [pc, #592]	@ (80014cc <HAL_GPIO_Init+0x2ac>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d04c      	beq.n	800131a <HAL_GPIO_Init+0xfa>
 8001280:	4a92      	ldr	r2, [pc, #584]	@ (80014cc <HAL_GPIO_Init+0x2ac>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d863      	bhi.n	800134e <HAL_GPIO_Init+0x12e>
 8001286:	4a92      	ldr	r2, [pc, #584]	@ (80014d0 <HAL_GPIO_Init+0x2b0>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d046      	beq.n	800131a <HAL_GPIO_Init+0xfa>
 800128c:	4a90      	ldr	r2, [pc, #576]	@ (80014d0 <HAL_GPIO_Init+0x2b0>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d85d      	bhi.n	800134e <HAL_GPIO_Init+0x12e>
 8001292:	2b12      	cmp	r3, #18
 8001294:	d82a      	bhi.n	80012ec <HAL_GPIO_Init+0xcc>
 8001296:	2b12      	cmp	r3, #18
 8001298:	d859      	bhi.n	800134e <HAL_GPIO_Init+0x12e>
 800129a:	a201      	add	r2, pc, #4	@ (adr r2, 80012a0 <HAL_GPIO_Init+0x80>)
 800129c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012a0:	0800131b 	.word	0x0800131b
 80012a4:	080012f5 	.word	0x080012f5
 80012a8:	08001307 	.word	0x08001307
 80012ac:	08001349 	.word	0x08001349
 80012b0:	0800134f 	.word	0x0800134f
 80012b4:	0800134f 	.word	0x0800134f
 80012b8:	0800134f 	.word	0x0800134f
 80012bc:	0800134f 	.word	0x0800134f
 80012c0:	0800134f 	.word	0x0800134f
 80012c4:	0800134f 	.word	0x0800134f
 80012c8:	0800134f 	.word	0x0800134f
 80012cc:	0800134f 	.word	0x0800134f
 80012d0:	0800134f 	.word	0x0800134f
 80012d4:	0800134f 	.word	0x0800134f
 80012d8:	0800134f 	.word	0x0800134f
 80012dc:	0800134f 	.word	0x0800134f
 80012e0:	0800134f 	.word	0x0800134f
 80012e4:	080012fd 	.word	0x080012fd
 80012e8:	08001311 	.word	0x08001311
 80012ec:	4a79      	ldr	r2, [pc, #484]	@ (80014d4 <HAL_GPIO_Init+0x2b4>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d013      	beq.n	800131a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012f2:	e02c      	b.n	800134e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	623b      	str	r3, [r7, #32]
          break;
 80012fa:	e029      	b.n	8001350 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	3304      	adds	r3, #4
 8001302:	623b      	str	r3, [r7, #32]
          break;
 8001304:	e024      	b.n	8001350 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	68db      	ldr	r3, [r3, #12]
 800130a:	3308      	adds	r3, #8
 800130c:	623b      	str	r3, [r7, #32]
          break;
 800130e:	e01f      	b.n	8001350 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	330c      	adds	r3, #12
 8001316:	623b      	str	r3, [r7, #32]
          break;
 8001318:	e01a      	b.n	8001350 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d102      	bne.n	8001328 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001322:	2304      	movs	r3, #4
 8001324:	623b      	str	r3, [r7, #32]
          break;
 8001326:	e013      	b.n	8001350 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d105      	bne.n	800133c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001330:	2308      	movs	r3, #8
 8001332:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	69fa      	ldr	r2, [r7, #28]
 8001338:	611a      	str	r2, [r3, #16]
          break;
 800133a:	e009      	b.n	8001350 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800133c:	2308      	movs	r3, #8
 800133e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	69fa      	ldr	r2, [r7, #28]
 8001344:	615a      	str	r2, [r3, #20]
          break;
 8001346:	e003      	b.n	8001350 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001348:	2300      	movs	r3, #0
 800134a:	623b      	str	r3, [r7, #32]
          break;
 800134c:	e000      	b.n	8001350 <HAL_GPIO_Init+0x130>
          break;
 800134e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	2bff      	cmp	r3, #255	@ 0xff
 8001354:	d801      	bhi.n	800135a <HAL_GPIO_Init+0x13a>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	e001      	b.n	800135e <HAL_GPIO_Init+0x13e>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	3304      	adds	r3, #4
 800135e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	2bff      	cmp	r3, #255	@ 0xff
 8001364:	d802      	bhi.n	800136c <HAL_GPIO_Init+0x14c>
 8001366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	e002      	b.n	8001372 <HAL_GPIO_Init+0x152>
 800136c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800136e:	3b08      	subs	r3, #8
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	210f      	movs	r1, #15
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	fa01 f303 	lsl.w	r3, r1, r3
 8001380:	43db      	mvns	r3, r3
 8001382:	401a      	ands	r2, r3
 8001384:	6a39      	ldr	r1, [r7, #32]
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	fa01 f303 	lsl.w	r3, r1, r3
 800138c:	431a      	orrs	r2, r3
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800139a:	2b00      	cmp	r3, #0
 800139c:	f000 80b1 	beq.w	8001502 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013a0:	4b4d      	ldr	r3, [pc, #308]	@ (80014d8 <HAL_GPIO_Init+0x2b8>)
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	4a4c      	ldr	r2, [pc, #304]	@ (80014d8 <HAL_GPIO_Init+0x2b8>)
 80013a6:	f043 0301 	orr.w	r3, r3, #1
 80013aa:	6193      	str	r3, [r2, #24]
 80013ac:	4b4a      	ldr	r3, [pc, #296]	@ (80014d8 <HAL_GPIO_Init+0x2b8>)
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	f003 0301 	and.w	r3, r3, #1
 80013b4:	60bb      	str	r3, [r7, #8]
 80013b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013b8:	4a48      	ldr	r2, [pc, #288]	@ (80014dc <HAL_GPIO_Init+0x2bc>)
 80013ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013bc:	089b      	lsrs	r3, r3, #2
 80013be:	3302      	adds	r3, #2
 80013c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c8:	f003 0303 	and.w	r3, r3, #3
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	220f      	movs	r2, #15
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	43db      	mvns	r3, r3
 80013d6:	68fa      	ldr	r2, [r7, #12]
 80013d8:	4013      	ands	r3, r2
 80013da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4a40      	ldr	r2, [pc, #256]	@ (80014e0 <HAL_GPIO_Init+0x2c0>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d013      	beq.n	800140c <HAL_GPIO_Init+0x1ec>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4a3f      	ldr	r2, [pc, #252]	@ (80014e4 <HAL_GPIO_Init+0x2c4>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d00d      	beq.n	8001408 <HAL_GPIO_Init+0x1e8>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4a3e      	ldr	r2, [pc, #248]	@ (80014e8 <HAL_GPIO_Init+0x2c8>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d007      	beq.n	8001404 <HAL_GPIO_Init+0x1e4>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4a3d      	ldr	r2, [pc, #244]	@ (80014ec <HAL_GPIO_Init+0x2cc>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d101      	bne.n	8001400 <HAL_GPIO_Init+0x1e0>
 80013fc:	2303      	movs	r3, #3
 80013fe:	e006      	b.n	800140e <HAL_GPIO_Init+0x1ee>
 8001400:	2304      	movs	r3, #4
 8001402:	e004      	b.n	800140e <HAL_GPIO_Init+0x1ee>
 8001404:	2302      	movs	r3, #2
 8001406:	e002      	b.n	800140e <HAL_GPIO_Init+0x1ee>
 8001408:	2301      	movs	r3, #1
 800140a:	e000      	b.n	800140e <HAL_GPIO_Init+0x1ee>
 800140c:	2300      	movs	r3, #0
 800140e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001410:	f002 0203 	and.w	r2, r2, #3
 8001414:	0092      	lsls	r2, r2, #2
 8001416:	4093      	lsls	r3, r2
 8001418:	68fa      	ldr	r2, [r7, #12]
 800141a:	4313      	orrs	r3, r2
 800141c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800141e:	492f      	ldr	r1, [pc, #188]	@ (80014dc <HAL_GPIO_Init+0x2bc>)
 8001420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001422:	089b      	lsrs	r3, r3, #2
 8001424:	3302      	adds	r3, #2
 8001426:	68fa      	ldr	r2, [r7, #12]
 8001428:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d006      	beq.n	8001446 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001438:	4b2d      	ldr	r3, [pc, #180]	@ (80014f0 <HAL_GPIO_Init+0x2d0>)
 800143a:	689a      	ldr	r2, [r3, #8]
 800143c:	492c      	ldr	r1, [pc, #176]	@ (80014f0 <HAL_GPIO_Init+0x2d0>)
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	4313      	orrs	r3, r2
 8001442:	608b      	str	r3, [r1, #8]
 8001444:	e006      	b.n	8001454 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001446:	4b2a      	ldr	r3, [pc, #168]	@ (80014f0 <HAL_GPIO_Init+0x2d0>)
 8001448:	689a      	ldr	r2, [r3, #8]
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	43db      	mvns	r3, r3
 800144e:	4928      	ldr	r1, [pc, #160]	@ (80014f0 <HAL_GPIO_Init+0x2d0>)
 8001450:	4013      	ands	r3, r2
 8001452:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d006      	beq.n	800146e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001460:	4b23      	ldr	r3, [pc, #140]	@ (80014f0 <HAL_GPIO_Init+0x2d0>)
 8001462:	68da      	ldr	r2, [r3, #12]
 8001464:	4922      	ldr	r1, [pc, #136]	@ (80014f0 <HAL_GPIO_Init+0x2d0>)
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	4313      	orrs	r3, r2
 800146a:	60cb      	str	r3, [r1, #12]
 800146c:	e006      	b.n	800147c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800146e:	4b20      	ldr	r3, [pc, #128]	@ (80014f0 <HAL_GPIO_Init+0x2d0>)
 8001470:	68da      	ldr	r2, [r3, #12]
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	43db      	mvns	r3, r3
 8001476:	491e      	ldr	r1, [pc, #120]	@ (80014f0 <HAL_GPIO_Init+0x2d0>)
 8001478:	4013      	ands	r3, r2
 800147a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d006      	beq.n	8001496 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001488:	4b19      	ldr	r3, [pc, #100]	@ (80014f0 <HAL_GPIO_Init+0x2d0>)
 800148a:	685a      	ldr	r2, [r3, #4]
 800148c:	4918      	ldr	r1, [pc, #96]	@ (80014f0 <HAL_GPIO_Init+0x2d0>)
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	4313      	orrs	r3, r2
 8001492:	604b      	str	r3, [r1, #4]
 8001494:	e006      	b.n	80014a4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001496:	4b16      	ldr	r3, [pc, #88]	@ (80014f0 <HAL_GPIO_Init+0x2d0>)
 8001498:	685a      	ldr	r2, [r3, #4]
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	43db      	mvns	r3, r3
 800149e:	4914      	ldr	r1, [pc, #80]	@ (80014f0 <HAL_GPIO_Init+0x2d0>)
 80014a0:	4013      	ands	r3, r2
 80014a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d021      	beq.n	80014f4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014b0:	4b0f      	ldr	r3, [pc, #60]	@ (80014f0 <HAL_GPIO_Init+0x2d0>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	490e      	ldr	r1, [pc, #56]	@ (80014f0 <HAL_GPIO_Init+0x2d0>)
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	600b      	str	r3, [r1, #0]
 80014bc:	e021      	b.n	8001502 <HAL_GPIO_Init+0x2e2>
 80014be:	bf00      	nop
 80014c0:	10320000 	.word	0x10320000
 80014c4:	10310000 	.word	0x10310000
 80014c8:	10220000 	.word	0x10220000
 80014cc:	10210000 	.word	0x10210000
 80014d0:	10120000 	.word	0x10120000
 80014d4:	10110000 	.word	0x10110000
 80014d8:	40021000 	.word	0x40021000
 80014dc:	40010000 	.word	0x40010000
 80014e0:	40010800 	.word	0x40010800
 80014e4:	40010c00 	.word	0x40010c00
 80014e8:	40011000 	.word	0x40011000
 80014ec:	40011400 	.word	0x40011400
 80014f0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001524 <HAL_GPIO_Init+0x304>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	43db      	mvns	r3, r3
 80014fc:	4909      	ldr	r1, [pc, #36]	@ (8001524 <HAL_GPIO_Init+0x304>)
 80014fe:	4013      	ands	r3, r2
 8001500:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001504:	3301      	adds	r3, #1
 8001506:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800150e:	fa22 f303 	lsr.w	r3, r2, r3
 8001512:	2b00      	cmp	r3, #0
 8001514:	f47f ae8e 	bne.w	8001234 <HAL_GPIO_Init+0x14>
  }
}
 8001518:	bf00      	nop
 800151a:	bf00      	nop
 800151c:	372c      	adds	r7, #44	@ 0x2c
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr
 8001524:	40010400 	.word	0x40010400

08001528 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d101      	bne.n	800153a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e272      	b.n	8001a20 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	2b00      	cmp	r3, #0
 8001544:	f000 8087 	beq.w	8001656 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001548:	4b92      	ldr	r3, [pc, #584]	@ (8001794 <HAL_RCC_OscConfig+0x26c>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f003 030c 	and.w	r3, r3, #12
 8001550:	2b04      	cmp	r3, #4
 8001552:	d00c      	beq.n	800156e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001554:	4b8f      	ldr	r3, [pc, #572]	@ (8001794 <HAL_RCC_OscConfig+0x26c>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f003 030c 	and.w	r3, r3, #12
 800155c:	2b08      	cmp	r3, #8
 800155e:	d112      	bne.n	8001586 <HAL_RCC_OscConfig+0x5e>
 8001560:	4b8c      	ldr	r3, [pc, #560]	@ (8001794 <HAL_RCC_OscConfig+0x26c>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001568:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800156c:	d10b      	bne.n	8001586 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800156e:	4b89      	ldr	r3, [pc, #548]	@ (8001794 <HAL_RCC_OscConfig+0x26c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d06c      	beq.n	8001654 <HAL_RCC_OscConfig+0x12c>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d168      	bne.n	8001654 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e24c      	b.n	8001a20 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800158e:	d106      	bne.n	800159e <HAL_RCC_OscConfig+0x76>
 8001590:	4b80      	ldr	r3, [pc, #512]	@ (8001794 <HAL_RCC_OscConfig+0x26c>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a7f      	ldr	r2, [pc, #508]	@ (8001794 <HAL_RCC_OscConfig+0x26c>)
 8001596:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800159a:	6013      	str	r3, [r2, #0]
 800159c:	e02e      	b.n	80015fc <HAL_RCC_OscConfig+0xd4>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d10c      	bne.n	80015c0 <HAL_RCC_OscConfig+0x98>
 80015a6:	4b7b      	ldr	r3, [pc, #492]	@ (8001794 <HAL_RCC_OscConfig+0x26c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a7a      	ldr	r2, [pc, #488]	@ (8001794 <HAL_RCC_OscConfig+0x26c>)
 80015ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015b0:	6013      	str	r3, [r2, #0]
 80015b2:	4b78      	ldr	r3, [pc, #480]	@ (8001794 <HAL_RCC_OscConfig+0x26c>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a77      	ldr	r2, [pc, #476]	@ (8001794 <HAL_RCC_OscConfig+0x26c>)
 80015b8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015bc:	6013      	str	r3, [r2, #0]
 80015be:	e01d      	b.n	80015fc <HAL_RCC_OscConfig+0xd4>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80015c8:	d10c      	bne.n	80015e4 <HAL_RCC_OscConfig+0xbc>
 80015ca:	4b72      	ldr	r3, [pc, #456]	@ (8001794 <HAL_RCC_OscConfig+0x26c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a71      	ldr	r2, [pc, #452]	@ (8001794 <HAL_RCC_OscConfig+0x26c>)
 80015d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015d4:	6013      	str	r3, [r2, #0]
 80015d6:	4b6f      	ldr	r3, [pc, #444]	@ (8001794 <HAL_RCC_OscConfig+0x26c>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a6e      	ldr	r2, [pc, #440]	@ (8001794 <HAL_RCC_OscConfig+0x26c>)
 80015dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015e0:	6013      	str	r3, [r2, #0]
 80015e2:	e00b      	b.n	80015fc <HAL_RCC_OscConfig+0xd4>
 80015e4:	4b6b      	ldr	r3, [pc, #428]	@ (8001794 <HAL_RCC_OscConfig+0x26c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a6a      	ldr	r2, [pc, #424]	@ (8001794 <HAL_RCC_OscConfig+0x26c>)
 80015ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015ee:	6013      	str	r3, [r2, #0]
 80015f0:	4b68      	ldr	r3, [pc, #416]	@ (8001794 <HAL_RCC_OscConfig+0x26c>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a67      	ldr	r2, [pc, #412]	@ (8001794 <HAL_RCC_OscConfig+0x26c>)
 80015f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d013      	beq.n	800162c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001604:	f7ff fc1e 	bl	8000e44 <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800160a:	e008      	b.n	800161e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800160c:	f7ff fc1a 	bl	8000e44 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b64      	cmp	r3, #100	@ 0x64
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e200      	b.n	8001a20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800161e:	4b5d      	ldr	r3, [pc, #372]	@ (8001794 <HAL_RCC_OscConfig+0x26c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d0f0      	beq.n	800160c <HAL_RCC_OscConfig+0xe4>
 800162a:	e014      	b.n	8001656 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162c:	f7ff fc0a 	bl	8000e44 <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001634:	f7ff fc06 	bl	8000e44 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b64      	cmp	r3, #100	@ 0x64
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e1ec      	b.n	8001a20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001646:	4b53      	ldr	r3, [pc, #332]	@ (8001794 <HAL_RCC_OscConfig+0x26c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1f0      	bne.n	8001634 <HAL_RCC_OscConfig+0x10c>
 8001652:	e000      	b.n	8001656 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001654:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	2b00      	cmp	r3, #0
 8001660:	d063      	beq.n	800172a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001662:	4b4c      	ldr	r3, [pc, #304]	@ (8001794 <HAL_RCC_OscConfig+0x26c>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f003 030c 	and.w	r3, r3, #12
 800166a:	2b00      	cmp	r3, #0
 800166c:	d00b      	beq.n	8001686 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800166e:	4b49      	ldr	r3, [pc, #292]	@ (8001794 <HAL_RCC_OscConfig+0x26c>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f003 030c 	and.w	r3, r3, #12
 8001676:	2b08      	cmp	r3, #8
 8001678:	d11c      	bne.n	80016b4 <HAL_RCC_OscConfig+0x18c>
 800167a:	4b46      	ldr	r3, [pc, #280]	@ (8001794 <HAL_RCC_OscConfig+0x26c>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d116      	bne.n	80016b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001686:	4b43      	ldr	r3, [pc, #268]	@ (8001794 <HAL_RCC_OscConfig+0x26c>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d005      	beq.n	800169e <HAL_RCC_OscConfig+0x176>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	691b      	ldr	r3, [r3, #16]
 8001696:	2b01      	cmp	r3, #1
 8001698:	d001      	beq.n	800169e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e1c0      	b.n	8001a20 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800169e:	4b3d      	ldr	r3, [pc, #244]	@ (8001794 <HAL_RCC_OscConfig+0x26c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	695b      	ldr	r3, [r3, #20]
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	4939      	ldr	r1, [pc, #228]	@ (8001794 <HAL_RCC_OscConfig+0x26c>)
 80016ae:	4313      	orrs	r3, r2
 80016b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016b2:	e03a      	b.n	800172a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	691b      	ldr	r3, [r3, #16]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d020      	beq.n	80016fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016bc:	4b36      	ldr	r3, [pc, #216]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 80016be:	2201      	movs	r2, #1
 80016c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c2:	f7ff fbbf 	bl	8000e44 <HAL_GetTick>
 80016c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016c8:	e008      	b.n	80016dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016ca:	f7ff fbbb 	bl	8000e44 <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d901      	bls.n	80016dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	e1a1      	b.n	8001a20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001794 <HAL_RCC_OscConfig+0x26c>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0302 	and.w	r3, r3, #2
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d0f0      	beq.n	80016ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001794 <HAL_RCC_OscConfig+0x26c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	695b      	ldr	r3, [r3, #20]
 80016f4:	00db      	lsls	r3, r3, #3
 80016f6:	4927      	ldr	r1, [pc, #156]	@ (8001794 <HAL_RCC_OscConfig+0x26c>)
 80016f8:	4313      	orrs	r3, r2
 80016fa:	600b      	str	r3, [r1, #0]
 80016fc:	e015      	b.n	800172a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016fe:	4b26      	ldr	r3, [pc, #152]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001704:	f7ff fb9e 	bl	8000e44 <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800170c:	f7ff fb9a 	bl	8000e44 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e180      	b.n	8001a20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800171e:	4b1d      	ldr	r3, [pc, #116]	@ (8001794 <HAL_RCC_OscConfig+0x26c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1f0      	bne.n	800170c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0308 	and.w	r3, r3, #8
 8001732:	2b00      	cmp	r3, #0
 8001734:	d03a      	beq.n	80017ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d019      	beq.n	8001772 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800173e:	4b17      	ldr	r3, [pc, #92]	@ (800179c <HAL_RCC_OscConfig+0x274>)
 8001740:	2201      	movs	r2, #1
 8001742:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001744:	f7ff fb7e 	bl	8000e44 <HAL_GetTick>
 8001748:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800174a:	e008      	b.n	800175e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800174c:	f7ff fb7a 	bl	8000e44 <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b02      	cmp	r3, #2
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e160      	b.n	8001a20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800175e:	4b0d      	ldr	r3, [pc, #52]	@ (8001794 <HAL_RCC_OscConfig+0x26c>)
 8001760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	2b00      	cmp	r3, #0
 8001768:	d0f0      	beq.n	800174c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800176a:	2001      	movs	r0, #1
 800176c:	f000 face 	bl	8001d0c <RCC_Delay>
 8001770:	e01c      	b.n	80017ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001772:	4b0a      	ldr	r3, [pc, #40]	@ (800179c <HAL_RCC_OscConfig+0x274>)
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001778:	f7ff fb64 	bl	8000e44 <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800177e:	e00f      	b.n	80017a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001780:	f7ff fb60 	bl	8000e44 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b02      	cmp	r3, #2
 800178c:	d908      	bls.n	80017a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e146      	b.n	8001a20 <HAL_RCC_OscConfig+0x4f8>
 8001792:	bf00      	nop
 8001794:	40021000 	.word	0x40021000
 8001798:	42420000 	.word	0x42420000
 800179c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017a0:	4b92      	ldr	r3, [pc, #584]	@ (80019ec <HAL_RCC_OscConfig+0x4c4>)
 80017a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017a4:	f003 0302 	and.w	r3, r3, #2
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d1e9      	bne.n	8001780 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0304 	and.w	r3, r3, #4
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	f000 80a6 	beq.w	8001906 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017ba:	2300      	movs	r3, #0
 80017bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017be:	4b8b      	ldr	r3, [pc, #556]	@ (80019ec <HAL_RCC_OscConfig+0x4c4>)
 80017c0:	69db      	ldr	r3, [r3, #28]
 80017c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d10d      	bne.n	80017e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017ca:	4b88      	ldr	r3, [pc, #544]	@ (80019ec <HAL_RCC_OscConfig+0x4c4>)
 80017cc:	69db      	ldr	r3, [r3, #28]
 80017ce:	4a87      	ldr	r2, [pc, #540]	@ (80019ec <HAL_RCC_OscConfig+0x4c4>)
 80017d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017d4:	61d3      	str	r3, [r2, #28]
 80017d6:	4b85      	ldr	r3, [pc, #532]	@ (80019ec <HAL_RCC_OscConfig+0x4c4>)
 80017d8:	69db      	ldr	r3, [r3, #28]
 80017da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017de:	60bb      	str	r3, [r7, #8]
 80017e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017e2:	2301      	movs	r3, #1
 80017e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e6:	4b82      	ldr	r3, [pc, #520]	@ (80019f0 <HAL_RCC_OscConfig+0x4c8>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d118      	bne.n	8001824 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017f2:	4b7f      	ldr	r3, [pc, #508]	@ (80019f0 <HAL_RCC_OscConfig+0x4c8>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a7e      	ldr	r2, [pc, #504]	@ (80019f0 <HAL_RCC_OscConfig+0x4c8>)
 80017f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017fe:	f7ff fb21 	bl	8000e44 <HAL_GetTick>
 8001802:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001804:	e008      	b.n	8001818 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001806:	f7ff fb1d 	bl	8000e44 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	2b64      	cmp	r3, #100	@ 0x64
 8001812:	d901      	bls.n	8001818 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e103      	b.n	8001a20 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001818:	4b75      	ldr	r3, [pc, #468]	@ (80019f0 <HAL_RCC_OscConfig+0x4c8>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001820:	2b00      	cmp	r3, #0
 8001822:	d0f0      	beq.n	8001806 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d106      	bne.n	800183a <HAL_RCC_OscConfig+0x312>
 800182c:	4b6f      	ldr	r3, [pc, #444]	@ (80019ec <HAL_RCC_OscConfig+0x4c4>)
 800182e:	6a1b      	ldr	r3, [r3, #32]
 8001830:	4a6e      	ldr	r2, [pc, #440]	@ (80019ec <HAL_RCC_OscConfig+0x4c4>)
 8001832:	f043 0301 	orr.w	r3, r3, #1
 8001836:	6213      	str	r3, [r2, #32]
 8001838:	e02d      	b.n	8001896 <HAL_RCC_OscConfig+0x36e>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d10c      	bne.n	800185c <HAL_RCC_OscConfig+0x334>
 8001842:	4b6a      	ldr	r3, [pc, #424]	@ (80019ec <HAL_RCC_OscConfig+0x4c4>)
 8001844:	6a1b      	ldr	r3, [r3, #32]
 8001846:	4a69      	ldr	r2, [pc, #420]	@ (80019ec <HAL_RCC_OscConfig+0x4c4>)
 8001848:	f023 0301 	bic.w	r3, r3, #1
 800184c:	6213      	str	r3, [r2, #32]
 800184e:	4b67      	ldr	r3, [pc, #412]	@ (80019ec <HAL_RCC_OscConfig+0x4c4>)
 8001850:	6a1b      	ldr	r3, [r3, #32]
 8001852:	4a66      	ldr	r2, [pc, #408]	@ (80019ec <HAL_RCC_OscConfig+0x4c4>)
 8001854:	f023 0304 	bic.w	r3, r3, #4
 8001858:	6213      	str	r3, [r2, #32]
 800185a:	e01c      	b.n	8001896 <HAL_RCC_OscConfig+0x36e>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	2b05      	cmp	r3, #5
 8001862:	d10c      	bne.n	800187e <HAL_RCC_OscConfig+0x356>
 8001864:	4b61      	ldr	r3, [pc, #388]	@ (80019ec <HAL_RCC_OscConfig+0x4c4>)
 8001866:	6a1b      	ldr	r3, [r3, #32]
 8001868:	4a60      	ldr	r2, [pc, #384]	@ (80019ec <HAL_RCC_OscConfig+0x4c4>)
 800186a:	f043 0304 	orr.w	r3, r3, #4
 800186e:	6213      	str	r3, [r2, #32]
 8001870:	4b5e      	ldr	r3, [pc, #376]	@ (80019ec <HAL_RCC_OscConfig+0x4c4>)
 8001872:	6a1b      	ldr	r3, [r3, #32]
 8001874:	4a5d      	ldr	r2, [pc, #372]	@ (80019ec <HAL_RCC_OscConfig+0x4c4>)
 8001876:	f043 0301 	orr.w	r3, r3, #1
 800187a:	6213      	str	r3, [r2, #32]
 800187c:	e00b      	b.n	8001896 <HAL_RCC_OscConfig+0x36e>
 800187e:	4b5b      	ldr	r3, [pc, #364]	@ (80019ec <HAL_RCC_OscConfig+0x4c4>)
 8001880:	6a1b      	ldr	r3, [r3, #32]
 8001882:	4a5a      	ldr	r2, [pc, #360]	@ (80019ec <HAL_RCC_OscConfig+0x4c4>)
 8001884:	f023 0301 	bic.w	r3, r3, #1
 8001888:	6213      	str	r3, [r2, #32]
 800188a:	4b58      	ldr	r3, [pc, #352]	@ (80019ec <HAL_RCC_OscConfig+0x4c4>)
 800188c:	6a1b      	ldr	r3, [r3, #32]
 800188e:	4a57      	ldr	r2, [pc, #348]	@ (80019ec <HAL_RCC_OscConfig+0x4c4>)
 8001890:	f023 0304 	bic.w	r3, r3, #4
 8001894:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d015      	beq.n	80018ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800189e:	f7ff fad1 	bl	8000e44 <HAL_GetTick>
 80018a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018a4:	e00a      	b.n	80018bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018a6:	f7ff facd 	bl	8000e44 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e0b1      	b.n	8001a20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018bc:	4b4b      	ldr	r3, [pc, #300]	@ (80019ec <HAL_RCC_OscConfig+0x4c4>)
 80018be:	6a1b      	ldr	r3, [r3, #32]
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d0ee      	beq.n	80018a6 <HAL_RCC_OscConfig+0x37e>
 80018c8:	e014      	b.n	80018f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ca:	f7ff fabb 	bl	8000e44 <HAL_GetTick>
 80018ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018d0:	e00a      	b.n	80018e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018d2:	f7ff fab7 	bl	8000e44 <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d901      	bls.n	80018e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e09b      	b.n	8001a20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018e8:	4b40      	ldr	r3, [pc, #256]	@ (80019ec <HAL_RCC_OscConfig+0x4c4>)
 80018ea:	6a1b      	ldr	r3, [r3, #32]
 80018ec:	f003 0302 	and.w	r3, r3, #2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d1ee      	bne.n	80018d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80018f4:	7dfb      	ldrb	r3, [r7, #23]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d105      	bne.n	8001906 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018fa:	4b3c      	ldr	r3, [pc, #240]	@ (80019ec <HAL_RCC_OscConfig+0x4c4>)
 80018fc:	69db      	ldr	r3, [r3, #28]
 80018fe:	4a3b      	ldr	r2, [pc, #236]	@ (80019ec <HAL_RCC_OscConfig+0x4c4>)
 8001900:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001904:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	69db      	ldr	r3, [r3, #28]
 800190a:	2b00      	cmp	r3, #0
 800190c:	f000 8087 	beq.w	8001a1e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001910:	4b36      	ldr	r3, [pc, #216]	@ (80019ec <HAL_RCC_OscConfig+0x4c4>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f003 030c 	and.w	r3, r3, #12
 8001918:	2b08      	cmp	r3, #8
 800191a:	d061      	beq.n	80019e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	69db      	ldr	r3, [r3, #28]
 8001920:	2b02      	cmp	r3, #2
 8001922:	d146      	bne.n	80019b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001924:	4b33      	ldr	r3, [pc, #204]	@ (80019f4 <HAL_RCC_OscConfig+0x4cc>)
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192a:	f7ff fa8b 	bl	8000e44 <HAL_GetTick>
 800192e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001930:	e008      	b.n	8001944 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001932:	f7ff fa87 	bl	8000e44 <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	2b02      	cmp	r3, #2
 800193e:	d901      	bls.n	8001944 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e06d      	b.n	8001a20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001944:	4b29      	ldr	r3, [pc, #164]	@ (80019ec <HAL_RCC_OscConfig+0x4c4>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d1f0      	bne.n	8001932 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a1b      	ldr	r3, [r3, #32]
 8001954:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001958:	d108      	bne.n	800196c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800195a:	4b24      	ldr	r3, [pc, #144]	@ (80019ec <HAL_RCC_OscConfig+0x4c4>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	4921      	ldr	r1, [pc, #132]	@ (80019ec <HAL_RCC_OscConfig+0x4c4>)
 8001968:	4313      	orrs	r3, r2
 800196a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800196c:	4b1f      	ldr	r3, [pc, #124]	@ (80019ec <HAL_RCC_OscConfig+0x4c4>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a19      	ldr	r1, [r3, #32]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800197c:	430b      	orrs	r3, r1
 800197e:	491b      	ldr	r1, [pc, #108]	@ (80019ec <HAL_RCC_OscConfig+0x4c4>)
 8001980:	4313      	orrs	r3, r2
 8001982:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001984:	4b1b      	ldr	r3, [pc, #108]	@ (80019f4 <HAL_RCC_OscConfig+0x4cc>)
 8001986:	2201      	movs	r2, #1
 8001988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800198a:	f7ff fa5b 	bl	8000e44 <HAL_GetTick>
 800198e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001990:	e008      	b.n	80019a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001992:	f7ff fa57 	bl	8000e44 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e03d      	b.n	8001a20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019a4:	4b11      	ldr	r3, [pc, #68]	@ (80019ec <HAL_RCC_OscConfig+0x4c4>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d0f0      	beq.n	8001992 <HAL_RCC_OscConfig+0x46a>
 80019b0:	e035      	b.n	8001a1e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019b2:	4b10      	ldr	r3, [pc, #64]	@ (80019f4 <HAL_RCC_OscConfig+0x4cc>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b8:	f7ff fa44 	bl	8000e44 <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c0:	f7ff fa40 	bl	8000e44 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e026      	b.n	8001a20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019d2:	4b06      	ldr	r3, [pc, #24]	@ (80019ec <HAL_RCC_OscConfig+0x4c4>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1f0      	bne.n	80019c0 <HAL_RCC_OscConfig+0x498>
 80019de:	e01e      	b.n	8001a1e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	69db      	ldr	r3, [r3, #28]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d107      	bne.n	80019f8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e019      	b.n	8001a20 <HAL_RCC_OscConfig+0x4f8>
 80019ec:	40021000 	.word	0x40021000
 80019f0:	40007000 	.word	0x40007000
 80019f4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001a28 <HAL_RCC_OscConfig+0x500>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a1b      	ldr	r3, [r3, #32]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d106      	bne.n	8001a1a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d001      	beq.n	8001a1e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e000      	b.n	8001a20 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3718      	adds	r7, #24
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40021000 	.word	0x40021000

08001a2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d101      	bne.n	8001a40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e0d0      	b.n	8001be2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a40:	4b6a      	ldr	r3, [pc, #424]	@ (8001bec <HAL_RCC_ClockConfig+0x1c0>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0307 	and.w	r3, r3, #7
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d910      	bls.n	8001a70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a4e:	4b67      	ldr	r3, [pc, #412]	@ (8001bec <HAL_RCC_ClockConfig+0x1c0>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f023 0207 	bic.w	r2, r3, #7
 8001a56:	4965      	ldr	r1, [pc, #404]	@ (8001bec <HAL_RCC_ClockConfig+0x1c0>)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a5e:	4b63      	ldr	r3, [pc, #396]	@ (8001bec <HAL_RCC_ClockConfig+0x1c0>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0307 	and.w	r3, r3, #7
 8001a66:	683a      	ldr	r2, [r7, #0]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d001      	beq.n	8001a70 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e0b8      	b.n	8001be2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d020      	beq.n	8001abe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0304 	and.w	r3, r3, #4
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d005      	beq.n	8001a94 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a88:	4b59      	ldr	r3, [pc, #356]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	4a58      	ldr	r2, [pc, #352]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a8e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001a92:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0308 	and.w	r3, r3, #8
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d005      	beq.n	8001aac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001aa0:	4b53      	ldr	r3, [pc, #332]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	4a52      	ldr	r2, [pc, #328]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001aaa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aac:	4b50      	ldr	r3, [pc, #320]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	494d      	ldr	r1, [pc, #308]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001aba:	4313      	orrs	r3, r2
 8001abc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d040      	beq.n	8001b4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d107      	bne.n	8001ae2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ad2:	4b47      	ldr	r3, [pc, #284]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d115      	bne.n	8001b0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e07f      	b.n	8001be2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d107      	bne.n	8001afa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aea:	4b41      	ldr	r3, [pc, #260]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d109      	bne.n	8001b0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e073      	b.n	8001be2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001afa:	4b3d      	ldr	r3, [pc, #244]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d101      	bne.n	8001b0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e06b      	b.n	8001be2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b0a:	4b39      	ldr	r3, [pc, #228]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f023 0203 	bic.w	r2, r3, #3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	4936      	ldr	r1, [pc, #216]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b1c:	f7ff f992 	bl	8000e44 <HAL_GetTick>
 8001b20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b22:	e00a      	b.n	8001b3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b24:	f7ff f98e 	bl	8000e44 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e053      	b.n	8001be2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b3a:	4b2d      	ldr	r3, [pc, #180]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f003 020c 	and.w	r2, r3, #12
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d1eb      	bne.n	8001b24 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b4c:	4b27      	ldr	r3, [pc, #156]	@ (8001bec <HAL_RCC_ClockConfig+0x1c0>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0307 	and.w	r3, r3, #7
 8001b54:	683a      	ldr	r2, [r7, #0]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d210      	bcs.n	8001b7c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b5a:	4b24      	ldr	r3, [pc, #144]	@ (8001bec <HAL_RCC_ClockConfig+0x1c0>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f023 0207 	bic.w	r2, r3, #7
 8001b62:	4922      	ldr	r1, [pc, #136]	@ (8001bec <HAL_RCC_ClockConfig+0x1c0>)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b6a:	4b20      	ldr	r3, [pc, #128]	@ (8001bec <HAL_RCC_ClockConfig+0x1c0>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0307 	and.w	r3, r3, #7
 8001b72:	683a      	ldr	r2, [r7, #0]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d001      	beq.n	8001b7c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e032      	b.n	8001be2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0304 	and.w	r3, r3, #4
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d008      	beq.n	8001b9a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b88:	4b19      	ldr	r3, [pc, #100]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	4916      	ldr	r1, [pc, #88]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b96:	4313      	orrs	r3, r2
 8001b98:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0308 	and.w	r3, r3, #8
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d009      	beq.n	8001bba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ba6:	4b12      	ldr	r3, [pc, #72]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	490e      	ldr	r1, [pc, #56]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bba:	f000 f821 	bl	8001c00 <HAL_RCC_GetSysClockFreq>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	091b      	lsrs	r3, r3, #4
 8001bc6:	f003 030f 	and.w	r3, r3, #15
 8001bca:	490a      	ldr	r1, [pc, #40]	@ (8001bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8001bcc:	5ccb      	ldrb	r3, [r1, r3]
 8001bce:	fa22 f303 	lsr.w	r3, r2, r3
 8001bd2:	4a09      	ldr	r2, [pc, #36]	@ (8001bf8 <HAL_RCC_ClockConfig+0x1cc>)
 8001bd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bd6:	4b09      	ldr	r3, [pc, #36]	@ (8001bfc <HAL_RCC_ClockConfig+0x1d0>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff f8f0 	bl	8000dc0 <HAL_InitTick>

  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40022000 	.word	0x40022000
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	08003894 	.word	0x08003894
 8001bf8:	20000000 	.word	0x20000000
 8001bfc:	20000004 	.word	0x20000004

08001c00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b087      	sub	sp, #28
 8001c04:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c06:	2300      	movs	r3, #0
 8001c08:	60fb      	str	r3, [r7, #12]
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60bb      	str	r3, [r7, #8]
 8001c0e:	2300      	movs	r3, #0
 8001c10:	617b      	str	r3, [r7, #20]
 8001c12:	2300      	movs	r3, #0
 8001c14:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001c16:	2300      	movs	r3, #0
 8001c18:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c1a:	4b1e      	ldr	r3, [pc, #120]	@ (8001c94 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f003 030c 	and.w	r3, r3, #12
 8001c26:	2b04      	cmp	r3, #4
 8001c28:	d002      	beq.n	8001c30 <HAL_RCC_GetSysClockFreq+0x30>
 8001c2a:	2b08      	cmp	r3, #8
 8001c2c:	d003      	beq.n	8001c36 <HAL_RCC_GetSysClockFreq+0x36>
 8001c2e:	e027      	b.n	8001c80 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c30:	4b19      	ldr	r3, [pc, #100]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c32:	613b      	str	r3, [r7, #16]
      break;
 8001c34:	e027      	b.n	8001c86 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	0c9b      	lsrs	r3, r3, #18
 8001c3a:	f003 030f 	and.w	r3, r3, #15
 8001c3e:	4a17      	ldr	r2, [pc, #92]	@ (8001c9c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001c40:	5cd3      	ldrb	r3, [r2, r3]
 8001c42:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d010      	beq.n	8001c70 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c4e:	4b11      	ldr	r3, [pc, #68]	@ (8001c94 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	0c5b      	lsrs	r3, r3, #17
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	4a11      	ldr	r2, [pc, #68]	@ (8001ca0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001c5a:	5cd3      	ldrb	r3, [r2, r3]
 8001c5c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a0d      	ldr	r2, [pc, #52]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c62:	fb03 f202 	mul.w	r2, r3, r2
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c6c:	617b      	str	r3, [r7, #20]
 8001c6e:	e004      	b.n	8001c7a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	4a0c      	ldr	r2, [pc, #48]	@ (8001ca4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001c74:	fb02 f303 	mul.w	r3, r2, r3
 8001c78:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	613b      	str	r3, [r7, #16]
      break;
 8001c7e:	e002      	b.n	8001c86 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c80:	4b05      	ldr	r3, [pc, #20]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c82:	613b      	str	r3, [r7, #16]
      break;
 8001c84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c86:	693b      	ldr	r3, [r7, #16]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	371c      	adds	r7, #28
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bc80      	pop	{r7}
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	40021000 	.word	0x40021000
 8001c98:	007a1200 	.word	0x007a1200
 8001c9c:	080038ac 	.word	0x080038ac
 8001ca0:	080038bc 	.word	0x080038bc
 8001ca4:	003d0900 	.word	0x003d0900

08001ca8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cac:	4b02      	ldr	r3, [pc, #8]	@ (8001cb8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001cae:	681b      	ldr	r3, [r3, #0]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bc80      	pop	{r7}
 8001cb6:	4770      	bx	lr
 8001cb8:	20000000 	.word	0x20000000

08001cbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cc0:	f7ff fff2 	bl	8001ca8 <HAL_RCC_GetHCLKFreq>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	4b05      	ldr	r3, [pc, #20]	@ (8001cdc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	0a1b      	lsrs	r3, r3, #8
 8001ccc:	f003 0307 	and.w	r3, r3, #7
 8001cd0:	4903      	ldr	r1, [pc, #12]	@ (8001ce0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cd2:	5ccb      	ldrb	r3, [r1, r3]
 8001cd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	080038a4 	.word	0x080038a4

08001ce4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ce8:	f7ff ffde 	bl	8001ca8 <HAL_RCC_GetHCLKFreq>
 8001cec:	4602      	mov	r2, r0
 8001cee:	4b05      	ldr	r3, [pc, #20]	@ (8001d04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	0adb      	lsrs	r3, r3, #11
 8001cf4:	f003 0307 	and.w	r3, r3, #7
 8001cf8:	4903      	ldr	r1, [pc, #12]	@ (8001d08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cfa:	5ccb      	ldrb	r3, [r1, r3]
 8001cfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	40021000 	.word	0x40021000
 8001d08:	080038a4 	.word	0x080038a4

08001d0c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d14:	4b0a      	ldr	r3, [pc, #40]	@ (8001d40 <RCC_Delay+0x34>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a0a      	ldr	r2, [pc, #40]	@ (8001d44 <RCC_Delay+0x38>)
 8001d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d1e:	0a5b      	lsrs	r3, r3, #9
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	fb02 f303 	mul.w	r3, r2, r3
 8001d26:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d28:	bf00      	nop
  }
  while (Delay --);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	1e5a      	subs	r2, r3, #1
 8001d2e:	60fa      	str	r2, [r7, #12]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d1f9      	bne.n	8001d28 <RCC_Delay+0x1c>
}
 8001d34:	bf00      	nop
 8001d36:	bf00      	nop
 8001d38:	3714      	adds	r7, #20
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr
 8001d40:	20000000 	.word	0x20000000
 8001d44:	10624dd3 	.word	0x10624dd3

08001d48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d101      	bne.n	8001d5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e042      	b.n	8001de0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d106      	bne.n	8001d74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f7fe feec 	bl	8000b4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2224      	movs	r2, #36	@ 0x24
 8001d78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	68da      	ldr	r2, [r3, #12]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001d8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 fe4f 	bl	8002a30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	691a      	ldr	r2, [r3, #16]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001da0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	695a      	ldr	r2, [r3, #20]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001db0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68da      	ldr	r2, [r3, #12]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001dc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2220      	movs	r2, #32
 8001dcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2220      	movs	r2, #32
 8001dd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b08a      	sub	sp, #40	@ 0x28
 8001dec:	af02      	add	r7, sp, #8
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	603b      	str	r3, [r7, #0]
 8001df4:	4613      	mov	r3, r2
 8001df6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	2b20      	cmp	r3, #32
 8001e06:	d175      	bne.n	8001ef4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d002      	beq.n	8001e14 <HAL_UART_Transmit+0x2c>
 8001e0e:	88fb      	ldrh	r3, [r7, #6]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d101      	bne.n	8001e18 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e06e      	b.n	8001ef6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2221      	movs	r2, #33	@ 0x21
 8001e22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001e26:	f7ff f80d 	bl	8000e44 <HAL_GetTick>
 8001e2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	88fa      	ldrh	r2, [r7, #6]
 8001e30:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	88fa      	ldrh	r2, [r7, #6]
 8001e36:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e40:	d108      	bne.n	8001e54 <HAL_UART_Transmit+0x6c>
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d104      	bne.n	8001e54 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	61bb      	str	r3, [r7, #24]
 8001e52:	e003      	b.n	8001e5c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001e5c:	e02e      	b.n	8001ebc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	9300      	str	r3, [sp, #0]
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	2200      	movs	r2, #0
 8001e66:	2180      	movs	r1, #128	@ 0x80
 8001e68:	68f8      	ldr	r0, [r7, #12]
 8001e6a:	f000 fbb4 	bl	80025d6 <UART_WaitOnFlagUntilTimeout>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d005      	beq.n	8001e80 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2220      	movs	r2, #32
 8001e78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e03a      	b.n	8001ef6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d10b      	bne.n	8001e9e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	881b      	ldrh	r3, [r3, #0]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e94:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	3302      	adds	r3, #2
 8001e9a:	61bb      	str	r3, [r7, #24]
 8001e9c:	e007      	b.n	8001eae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	781a      	ldrb	r2, [r3, #0]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	3301      	adds	r3, #1
 8001eac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	3b01      	subs	r3, #1
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1cb      	bne.n	8001e5e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	9300      	str	r3, [sp, #0]
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	2140      	movs	r1, #64	@ 0x40
 8001ed0:	68f8      	ldr	r0, [r7, #12]
 8001ed2:	f000 fb80 	bl	80025d6 <UART_WaitOnFlagUntilTimeout>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d005      	beq.n	8001ee8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2220      	movs	r2, #32
 8001ee0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e006      	b.n	8001ef6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2220      	movs	r2, #32
 8001eec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	e000      	b.n	8001ef6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001ef4:	2302      	movs	r3, #2
  }
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3720      	adds	r7, #32
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b08a      	sub	sp, #40	@ 0x28
 8001f02:	af02      	add	r7, sp, #8
 8001f04:	60f8      	str	r0, [r7, #12]
 8001f06:	60b9      	str	r1, [r7, #8]
 8001f08:	603b      	str	r3, [r7, #0]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b20      	cmp	r3, #32
 8001f1c:	f040 8081 	bne.w	8002022 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d002      	beq.n	8001f2c <HAL_UART_Receive+0x2e>
 8001f26:	88fb      	ldrh	r3, [r7, #6]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d101      	bne.n	8001f30 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e079      	b.n	8002024 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2200      	movs	r2, #0
 8001f34:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2222      	movs	r2, #34	@ 0x22
 8001f3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2200      	movs	r2, #0
 8001f42:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f44:	f7fe ff7e 	bl	8000e44 <HAL_GetTick>
 8001f48:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	88fa      	ldrh	r2, [r7, #6]
 8001f4e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	88fa      	ldrh	r2, [r7, #6]
 8001f54:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f5e:	d108      	bne.n	8001f72 <HAL_UART_Receive+0x74>
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	691b      	ldr	r3, [r3, #16]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d104      	bne.n	8001f72 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	61bb      	str	r3, [r7, #24]
 8001f70:	e003      	b.n	8001f7a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001f7a:	e047      	b.n	800200c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	9300      	str	r3, [sp, #0]
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	2200      	movs	r2, #0
 8001f84:	2120      	movs	r1, #32
 8001f86:	68f8      	ldr	r0, [r7, #12]
 8001f88:	f000 fb25 	bl	80025d6 <UART_WaitOnFlagUntilTimeout>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d005      	beq.n	8001f9e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2220      	movs	r2, #32
 8001f96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e042      	b.n	8002024 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d10c      	bne.n	8001fbe <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fb0:	b29a      	uxth	r2, r3
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	3302      	adds	r3, #2
 8001fba:	61bb      	str	r3, [r7, #24]
 8001fbc:	e01f      	b.n	8001ffe <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001fc6:	d007      	beq.n	8001fd8 <HAL_UART_Receive+0xda>
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d10a      	bne.n	8001fe6 <HAL_UART_Receive+0xe8>
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d106      	bne.n	8001fe6 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	b2da      	uxtb	r2, r3
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	701a      	strb	r2, [r3, #0]
 8001fe4:	e008      	b.n	8001ff8 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001ff2:	b2da      	uxtb	r2, r3
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002002:	b29b      	uxth	r3, r3
 8002004:	3b01      	subs	r3, #1
 8002006:	b29a      	uxth	r2, r3
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002010:	b29b      	uxth	r3, r3
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1b2      	bne.n	8001f7c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2220      	movs	r2, #32
 800201a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800201e:	2300      	movs	r3, #0
 8002020:	e000      	b.n	8002024 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002022:	2302      	movs	r3, #2
  }
}
 8002024:	4618      	mov	r0, r3
 8002026:	3720      	adds	r7, #32
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	4613      	mov	r3, r2
 8002038:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b20      	cmp	r3, #32
 8002044:	d112      	bne.n	800206c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d002      	beq.n	8002052 <HAL_UART_Receive_IT+0x26>
 800204c:	88fb      	ldrh	r3, [r7, #6]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e00b      	b.n	800206e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2200      	movs	r2, #0
 800205a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800205c:	88fb      	ldrh	r3, [r7, #6]
 800205e:	461a      	mov	r2, r3
 8002060:	68b9      	ldr	r1, [r7, #8]
 8002062:	68f8      	ldr	r0, [r7, #12]
 8002064:	f000 fb10 	bl	8002688 <UART_Start_Receive_IT>
 8002068:	4603      	mov	r3, r0
 800206a:	e000      	b.n	800206e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800206c:	2302      	movs	r3, #2
  }
}
 800206e:	4618      	mov	r0, r3
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
	...

08002078 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b0ba      	sub	sp, #232	@ 0xe8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	695b      	ldr	r3, [r3, #20]
 800209a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800209e:	2300      	movs	r3, #0
 80020a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80020a4:	2300      	movs	r3, #0
 80020a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80020aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80020ae:	f003 030f 	and.w	r3, r3, #15
 80020b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80020b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d10f      	bne.n	80020de <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80020be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80020c2:	f003 0320 	and.w	r3, r3, #32
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d009      	beq.n	80020de <HAL_UART_IRQHandler+0x66>
 80020ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80020ce:	f003 0320 	and.w	r3, r3, #32
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d003      	beq.n	80020de <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 fbec 	bl	80028b4 <UART_Receive_IT>
      return;
 80020dc:	e25b      	b.n	8002596 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80020de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	f000 80de 	beq.w	80022a4 <HAL_UART_IRQHandler+0x22c>
 80020e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80020ec:	f003 0301 	and.w	r3, r3, #1
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d106      	bne.n	8002102 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80020f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80020f8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f000 80d1 	beq.w	80022a4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	2b00      	cmp	r3, #0
 800210c:	d00b      	beq.n	8002126 <HAL_UART_IRQHandler+0xae>
 800210e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002112:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002116:	2b00      	cmp	r3, #0
 8002118:	d005      	beq.n	8002126 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800211e:	f043 0201 	orr.w	r2, r3, #1
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800212a:	f003 0304 	and.w	r3, r3, #4
 800212e:	2b00      	cmp	r3, #0
 8002130:	d00b      	beq.n	800214a <HAL_UART_IRQHandler+0xd2>
 8002132:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b00      	cmp	r3, #0
 800213c:	d005      	beq.n	800214a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002142:	f043 0202 	orr.w	r2, r3, #2
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800214a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d00b      	beq.n	800216e <HAL_UART_IRQHandler+0xf6>
 8002156:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	2b00      	cmp	r3, #0
 8002160:	d005      	beq.n	800216e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002166:	f043 0204 	orr.w	r2, r3, #4
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800216e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002172:	f003 0308 	and.w	r3, r3, #8
 8002176:	2b00      	cmp	r3, #0
 8002178:	d011      	beq.n	800219e <HAL_UART_IRQHandler+0x126>
 800217a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800217e:	f003 0320 	and.w	r3, r3, #32
 8002182:	2b00      	cmp	r3, #0
 8002184:	d105      	bne.n	8002192 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002186:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	2b00      	cmp	r3, #0
 8002190:	d005      	beq.n	800219e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002196:	f043 0208 	orr.w	r2, r3, #8
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	f000 81f2 	beq.w	800258c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80021a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80021ac:	f003 0320 	and.w	r3, r3, #32
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d008      	beq.n	80021c6 <HAL_UART_IRQHandler+0x14e>
 80021b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80021b8:	f003 0320 	and.w	r3, r3, #32
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d002      	beq.n	80021c6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f000 fb77 	bl	80028b4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	695b      	ldr	r3, [r3, #20]
 80021cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	bf14      	ite	ne
 80021d4:	2301      	movne	r3, #1
 80021d6:	2300      	moveq	r3, #0
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021e2:	f003 0308 	and.w	r3, r3, #8
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d103      	bne.n	80021f2 <HAL_UART_IRQHandler+0x17a>
 80021ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d04f      	beq.n	8002292 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 fa81 	bl	80026fa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002202:	2b00      	cmp	r3, #0
 8002204:	d041      	beq.n	800228a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	3314      	adds	r3, #20
 800220c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002210:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002214:	e853 3f00 	ldrex	r3, [r3]
 8002218:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800221c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002220:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002224:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	3314      	adds	r3, #20
 800222e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002232:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002236:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800223a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800223e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002242:	e841 2300 	strex	r3, r2, [r1]
 8002246:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800224a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1d9      	bne.n	8002206 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002256:	2b00      	cmp	r3, #0
 8002258:	d013      	beq.n	8002282 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800225e:	4a7e      	ldr	r2, [pc, #504]	@ (8002458 <HAL_UART_IRQHandler+0x3e0>)
 8002260:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002266:	4618      	mov	r0, r3
 8002268:	f7fe ff62 	bl	8001130 <HAL_DMA_Abort_IT>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d016      	beq.n	80022a0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002276:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800227c:	4610      	mov	r0, r2
 800227e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002280:	e00e      	b.n	80022a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 f993 	bl	80025ae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002288:	e00a      	b.n	80022a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 f98f 	bl	80025ae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002290:	e006      	b.n	80022a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f000 f98b 	bl	80025ae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800229e:	e175      	b.n	800258c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022a0:	bf00      	nop
    return;
 80022a2:	e173      	b.n	800258c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	f040 814f 	bne.w	800254c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80022ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80022b2:	f003 0310 	and.w	r3, r3, #16
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f000 8148 	beq.w	800254c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80022bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80022c0:	f003 0310 	and.w	r3, r3, #16
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	f000 8141 	beq.w	800254c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80022ca:	2300      	movs	r3, #0
 80022cc:	60bb      	str	r3, [r7, #8]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	60bb      	str	r3, [r7, #8]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	60bb      	str	r3, [r7, #8]
 80022de:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f000 80b6 	beq.w	800245c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80022fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002300:	2b00      	cmp	r3, #0
 8002302:	f000 8145 	beq.w	8002590 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800230a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800230e:	429a      	cmp	r2, r3
 8002310:	f080 813e 	bcs.w	8002590 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800231a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	2b20      	cmp	r3, #32
 8002324:	f000 8088 	beq.w	8002438 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	330c      	adds	r3, #12
 800232e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002332:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002336:	e853 3f00 	ldrex	r3, [r3]
 800233a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800233e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002342:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002346:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	330c      	adds	r3, #12
 8002350:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002354:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002358:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800235c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002360:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002364:	e841 2300 	strex	r3, r2, [r1]
 8002368:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800236c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1d9      	bne.n	8002328 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	3314      	adds	r3, #20
 800237a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800237c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800237e:	e853 3f00 	ldrex	r3, [r3]
 8002382:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002384:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002386:	f023 0301 	bic.w	r3, r3, #1
 800238a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	3314      	adds	r3, #20
 8002394:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002398:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800239c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800239e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80023a0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80023a4:	e841 2300 	strex	r3, r2, [r1]
 80023a8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80023aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1e1      	bne.n	8002374 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	3314      	adds	r3, #20
 80023b6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80023ba:	e853 3f00 	ldrex	r3, [r3]
 80023be:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80023c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80023c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80023c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	3314      	adds	r3, #20
 80023d0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80023d4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80023d6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023d8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80023da:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80023dc:	e841 2300 	strex	r3, r2, [r1]
 80023e0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80023e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d1e3      	bne.n	80023b0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2220      	movs	r2, #32
 80023ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	330c      	adds	r3, #12
 80023fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002400:	e853 3f00 	ldrex	r3, [r3]
 8002404:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002406:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002408:	f023 0310 	bic.w	r3, r3, #16
 800240c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	330c      	adds	r3, #12
 8002416:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800241a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800241c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800241e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002420:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002422:	e841 2300 	strex	r3, r2, [r1]
 8002426:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002428:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1e3      	bne.n	80023f6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002432:	4618      	mov	r0, r3
 8002434:	f7fe fe41 	bl	80010ba <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2202      	movs	r2, #2
 800243c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002446:	b29b      	uxth	r3, r3
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	b29b      	uxth	r3, r3
 800244c:	4619      	mov	r1, r3
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f000 f8b6 	bl	80025c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002454:	e09c      	b.n	8002590 <HAL_UART_IRQHandler+0x518>
 8002456:	bf00      	nop
 8002458:	080027bf 	.word	0x080027bf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002464:	b29b      	uxth	r3, r3
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002470:	b29b      	uxth	r3, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	f000 808e 	beq.w	8002594 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002478:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800247c:	2b00      	cmp	r3, #0
 800247e:	f000 8089 	beq.w	8002594 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	330c      	adds	r3, #12
 8002488:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800248a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800248c:	e853 3f00 	ldrex	r3, [r3]
 8002490:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002492:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002494:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002498:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	330c      	adds	r3, #12
 80024a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80024a6:	647a      	str	r2, [r7, #68]	@ 0x44
 80024a8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80024ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80024ae:	e841 2300 	strex	r3, r2, [r1]
 80024b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80024b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1e3      	bne.n	8002482 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	3314      	adds	r3, #20
 80024c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c4:	e853 3f00 	ldrex	r3, [r3]
 80024c8:	623b      	str	r3, [r7, #32]
   return(result);
 80024ca:	6a3b      	ldr	r3, [r7, #32]
 80024cc:	f023 0301 	bic.w	r3, r3, #1
 80024d0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	3314      	adds	r3, #20
 80024da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80024de:	633a      	str	r2, [r7, #48]	@ 0x30
 80024e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80024e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80024e6:	e841 2300 	strex	r3, r2, [r1]
 80024ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80024ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1e3      	bne.n	80024ba <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2220      	movs	r2, #32
 80024f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	330c      	adds	r3, #12
 8002506:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	e853 3f00 	ldrex	r3, [r3]
 800250e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f023 0310 	bic.w	r3, r3, #16
 8002516:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	330c      	adds	r3, #12
 8002520:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002524:	61fa      	str	r2, [r7, #28]
 8002526:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002528:	69b9      	ldr	r1, [r7, #24]
 800252a:	69fa      	ldr	r2, [r7, #28]
 800252c:	e841 2300 	strex	r3, r2, [r1]
 8002530:	617b      	str	r3, [r7, #20]
   return(result);
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d1e3      	bne.n	8002500 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2202      	movs	r2, #2
 800253c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800253e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002542:	4619      	mov	r1, r3
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 f83b 	bl	80025c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800254a:	e023      	b.n	8002594 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800254c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002550:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002554:	2b00      	cmp	r3, #0
 8002556:	d009      	beq.n	800256c <HAL_UART_IRQHandler+0x4f4>
 8002558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800255c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002560:	2b00      	cmp	r3, #0
 8002562:	d003      	beq.n	800256c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f000 f93e 	bl	80027e6 <UART_Transmit_IT>
    return;
 800256a:	e014      	b.n	8002596 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800256c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002570:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002574:	2b00      	cmp	r3, #0
 8002576:	d00e      	beq.n	8002596 <HAL_UART_IRQHandler+0x51e>
 8002578:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800257c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002580:	2b00      	cmp	r3, #0
 8002582:	d008      	beq.n	8002596 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f000 f97d 	bl	8002884 <UART_EndTransmit_IT>
    return;
 800258a:	e004      	b.n	8002596 <HAL_UART_IRQHandler+0x51e>
    return;
 800258c:	bf00      	nop
 800258e:	e002      	b.n	8002596 <HAL_UART_IRQHandler+0x51e>
      return;
 8002590:	bf00      	nop
 8002592:	e000      	b.n	8002596 <HAL_UART_IRQHandler+0x51e>
      return;
 8002594:	bf00      	nop
  }
}
 8002596:	37e8      	adds	r7, #232	@ 0xe8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80025a4:	bf00      	nop
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bc80      	pop	{r7}
 80025ac:	4770      	bx	lr

080025ae <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80025ae:	b480      	push	{r7}
 80025b0:	b083      	sub	sp, #12
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80025b6:	bf00      	nop
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bc80      	pop	{r7}
 80025be:	4770      	bx	lr

080025c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	460b      	mov	r3, r1
 80025ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bc80      	pop	{r7}
 80025d4:	4770      	bx	lr

080025d6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b086      	sub	sp, #24
 80025da:	af00      	add	r7, sp, #0
 80025dc:	60f8      	str	r0, [r7, #12]
 80025de:	60b9      	str	r1, [r7, #8]
 80025e0:	603b      	str	r3, [r7, #0]
 80025e2:	4613      	mov	r3, r2
 80025e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025e6:	e03b      	b.n	8002660 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025e8:	6a3b      	ldr	r3, [r7, #32]
 80025ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ee:	d037      	beq.n	8002660 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025f0:	f7fe fc28 	bl	8000e44 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	6a3a      	ldr	r2, [r7, #32]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d302      	bcc.n	8002606 <UART_WaitOnFlagUntilTimeout+0x30>
 8002600:	6a3b      	ldr	r3, [r7, #32]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e03a      	b.n	8002680 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	f003 0304 	and.w	r3, r3, #4
 8002614:	2b00      	cmp	r3, #0
 8002616:	d023      	beq.n	8002660 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	2b80      	cmp	r3, #128	@ 0x80
 800261c:	d020      	beq.n	8002660 <UART_WaitOnFlagUntilTimeout+0x8a>
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	2b40      	cmp	r3, #64	@ 0x40
 8002622:	d01d      	beq.n	8002660 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0308 	and.w	r3, r3, #8
 800262e:	2b08      	cmp	r3, #8
 8002630:	d116      	bne.n	8002660 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002632:	2300      	movs	r3, #0
 8002634:	617b      	str	r3, [r7, #20]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	617b      	str	r3, [r7, #20]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	617b      	str	r3, [r7, #20]
 8002646:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	f000 f856 	bl	80026fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2208      	movs	r2, #8
 8002652:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e00f      	b.n	8002680 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	4013      	ands	r3, r2
 800266a:	68ba      	ldr	r2, [r7, #8]
 800266c:	429a      	cmp	r2, r3
 800266e:	bf0c      	ite	eq
 8002670:	2301      	moveq	r3, #1
 8002672:	2300      	movne	r3, #0
 8002674:	b2db      	uxtb	r3, r3
 8002676:	461a      	mov	r2, r3
 8002678:	79fb      	ldrb	r3, [r7, #7]
 800267a:	429a      	cmp	r2, r3
 800267c:	d0b4      	beq.n	80025e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800267e:	2300      	movs	r3, #0
}
 8002680:	4618      	mov	r0, r3
 8002682:	3718      	adds	r7, #24
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	4613      	mov	r3, r2
 8002694:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	68ba      	ldr	r2, [r7, #8]
 800269a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	88fa      	ldrh	r2, [r7, #6]
 80026a0:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	88fa      	ldrh	r2, [r7, #6]
 80026a6:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2222      	movs	r2, #34	@ 0x22
 80026b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d007      	beq.n	80026ce <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68da      	ldr	r2, [r3, #12]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026cc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	695a      	ldr	r2, [r3, #20]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f042 0201 	orr.w	r2, r2, #1
 80026dc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68da      	ldr	r2, [r3, #12]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f042 0220 	orr.w	r2, r2, #32
 80026ec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3714      	adds	r7, #20
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bc80      	pop	{r7}
 80026f8:	4770      	bx	lr

080026fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80026fa:	b480      	push	{r7}
 80026fc:	b095      	sub	sp, #84	@ 0x54
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	330c      	adds	r3, #12
 8002708:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800270a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800270c:	e853 3f00 	ldrex	r3, [r3]
 8002710:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002714:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002718:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	330c      	adds	r3, #12
 8002720:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002722:	643a      	str	r2, [r7, #64]	@ 0x40
 8002724:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002726:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002728:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800272a:	e841 2300 	strex	r3, r2, [r1]
 800272e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1e5      	bne.n	8002702 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	3314      	adds	r3, #20
 800273c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800273e:	6a3b      	ldr	r3, [r7, #32]
 8002740:	e853 3f00 	ldrex	r3, [r3]
 8002744:	61fb      	str	r3, [r7, #28]
   return(result);
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	f023 0301 	bic.w	r3, r3, #1
 800274c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	3314      	adds	r3, #20
 8002754:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002756:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002758:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800275a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800275c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800275e:	e841 2300 	strex	r3, r2, [r1]
 8002762:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1e5      	bne.n	8002736 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800276e:	2b01      	cmp	r3, #1
 8002770:	d119      	bne.n	80027a6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	330c      	adds	r3, #12
 8002778:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	e853 3f00 	ldrex	r3, [r3]
 8002780:	60bb      	str	r3, [r7, #8]
   return(result);
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	f023 0310 	bic.w	r3, r3, #16
 8002788:	647b      	str	r3, [r7, #68]	@ 0x44
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	330c      	adds	r3, #12
 8002790:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002792:	61ba      	str	r2, [r7, #24]
 8002794:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002796:	6979      	ldr	r1, [r7, #20]
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	e841 2300 	strex	r3, r2, [r1]
 800279e:	613b      	str	r3, [r7, #16]
   return(result);
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1e5      	bne.n	8002772 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2220      	movs	r2, #32
 80027aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80027b4:	bf00      	nop
 80027b6:	3754      	adds	r7, #84	@ 0x54
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bc80      	pop	{r7}
 80027bc:	4770      	bx	lr

080027be <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b084      	sub	sp, #16
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2200      	movs	r2, #0
 80027d0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2200      	movs	r2, #0
 80027d6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80027d8:	68f8      	ldr	r0, [r7, #12]
 80027da:	f7ff fee8 	bl	80025ae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80027de:	bf00      	nop
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80027e6:	b480      	push	{r7}
 80027e8:	b085      	sub	sp, #20
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b21      	cmp	r3, #33	@ 0x21
 80027f8:	d13e      	bne.n	8002878 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002802:	d114      	bne.n	800282e <UART_Transmit_IT+0x48>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d110      	bne.n	800282e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a1b      	ldr	r3, [r3, #32]
 8002810:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	881b      	ldrh	r3, [r3, #0]
 8002816:	461a      	mov	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002820:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	1c9a      	adds	r2, r3, #2
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	621a      	str	r2, [r3, #32]
 800282c:	e008      	b.n	8002840 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a1b      	ldr	r3, [r3, #32]
 8002832:	1c59      	adds	r1, r3, #1
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	6211      	str	r1, [r2, #32]
 8002838:	781a      	ldrb	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002844:	b29b      	uxth	r3, r3
 8002846:	3b01      	subs	r3, #1
 8002848:	b29b      	uxth	r3, r3
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	4619      	mov	r1, r3
 800284e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002850:	2b00      	cmp	r3, #0
 8002852:	d10f      	bne.n	8002874 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68da      	ldr	r2, [r3, #12]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002862:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68da      	ldr	r2, [r3, #12]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002872:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002874:	2300      	movs	r3, #0
 8002876:	e000      	b.n	800287a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002878:	2302      	movs	r3, #2
  }
}
 800287a:	4618      	mov	r0, r3
 800287c:	3714      	adds	r7, #20
 800287e:	46bd      	mov	sp, r7
 8002880:	bc80      	pop	{r7}
 8002882:	4770      	bx	lr

08002884 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68da      	ldr	r2, [r3, #12]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800289a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2220      	movs	r2, #32
 80028a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f7ff fe79 	bl	800259c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3708      	adds	r7, #8
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b08c      	sub	sp, #48	@ 0x30
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	2b22      	cmp	r3, #34	@ 0x22
 80028c6:	f040 80ae 	bne.w	8002a26 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028d2:	d117      	bne.n	8002904 <UART_Receive_IT+0x50>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d113      	bne.n	8002904 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80028dc:	2300      	movs	r3, #0
 80028de:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028e4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028f2:	b29a      	uxth	r2, r3
 80028f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028f6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028fc:	1c9a      	adds	r2, r3, #2
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	629a      	str	r2, [r3, #40]	@ 0x28
 8002902:	e026      	b.n	8002952 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002908:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800290a:	2300      	movs	r3, #0
 800290c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002916:	d007      	beq.n	8002928 <UART_Receive_IT+0x74>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d10a      	bne.n	8002936 <UART_Receive_IT+0x82>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d106      	bne.n	8002936 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	b2da      	uxtb	r2, r3
 8002930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002932:	701a      	strb	r2, [r3, #0]
 8002934:	e008      	b.n	8002948 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	b2db      	uxtb	r3, r3
 800293e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002942:	b2da      	uxtb	r2, r3
 8002944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002946:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800294c:	1c5a      	adds	r2, r3, #1
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002956:	b29b      	uxth	r3, r3
 8002958:	3b01      	subs	r3, #1
 800295a:	b29b      	uxth	r3, r3
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	4619      	mov	r1, r3
 8002960:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002962:	2b00      	cmp	r3, #0
 8002964:	d15d      	bne.n	8002a22 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68da      	ldr	r2, [r3, #12]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f022 0220 	bic.w	r2, r2, #32
 8002974:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68da      	ldr	r2, [r3, #12]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002984:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	695a      	ldr	r2, [r3, #20]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f022 0201 	bic.w	r2, r2, #1
 8002994:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2220      	movs	r2, #32
 800299a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d135      	bne.n	8002a18 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	330c      	adds	r3, #12
 80029b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	e853 3f00 	ldrex	r3, [r3]
 80029c0:	613b      	str	r3, [r7, #16]
   return(result);
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	f023 0310 	bic.w	r3, r3, #16
 80029c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	330c      	adds	r3, #12
 80029d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029d2:	623a      	str	r2, [r7, #32]
 80029d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029d6:	69f9      	ldr	r1, [r7, #28]
 80029d8:	6a3a      	ldr	r2, [r7, #32]
 80029da:	e841 2300 	strex	r3, r2, [r1]
 80029de:	61bb      	str	r3, [r7, #24]
   return(result);
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d1e5      	bne.n	80029b2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0310 	and.w	r3, r3, #16
 80029f0:	2b10      	cmp	r3, #16
 80029f2:	d10a      	bne.n	8002a0a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80029f4:	2300      	movs	r3, #0
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002a0e:	4619      	mov	r1, r3
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f7ff fdd5 	bl	80025c0 <HAL_UARTEx_RxEventCallback>
 8002a16:	e002      	b.n	8002a1e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f7fd fec5 	bl	80007a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	e002      	b.n	8002a28 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002a22:	2300      	movs	r3, #0
 8002a24:	e000      	b.n	8002a28 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002a26:	2302      	movs	r3, #2
  }
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3730      	adds	r7, #48	@ 0x30
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	68da      	ldr	r2, [r3, #12]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	689a      	ldr	r2, [r3, #8]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	431a      	orrs	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	695b      	ldr	r3, [r3, #20]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002a6a:	f023 030c 	bic.w	r3, r3, #12
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	6812      	ldr	r2, [r2, #0]
 8002a72:	68b9      	ldr	r1, [r7, #8]
 8002a74:	430b      	orrs	r3, r1
 8002a76:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	699a      	ldr	r2, [r3, #24]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a2c      	ldr	r2, [pc, #176]	@ (8002b44 <UART_SetConfig+0x114>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d103      	bne.n	8002aa0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002a98:	f7ff f924 	bl	8001ce4 <HAL_RCC_GetPCLK2Freq>
 8002a9c:	60f8      	str	r0, [r7, #12]
 8002a9e:	e002      	b.n	8002aa6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002aa0:	f7ff f90c 	bl	8001cbc <HAL_RCC_GetPCLK1Freq>
 8002aa4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	4413      	add	r3, r2
 8002aae:	009a      	lsls	r2, r3, #2
 8002ab0:	441a      	add	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002abc:	4a22      	ldr	r2, [pc, #136]	@ (8002b48 <UART_SetConfig+0x118>)
 8002abe:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac2:	095b      	lsrs	r3, r3, #5
 8002ac4:	0119      	lsls	r1, r3, #4
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	4413      	add	r3, r2
 8002ace:	009a      	lsls	r2, r3, #2
 8002ad0:	441a      	add	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002adc:	4b1a      	ldr	r3, [pc, #104]	@ (8002b48 <UART_SetConfig+0x118>)
 8002ade:	fba3 0302 	umull	r0, r3, r3, r2
 8002ae2:	095b      	lsrs	r3, r3, #5
 8002ae4:	2064      	movs	r0, #100	@ 0x64
 8002ae6:	fb00 f303 	mul.w	r3, r0, r3
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	011b      	lsls	r3, r3, #4
 8002aee:	3332      	adds	r3, #50	@ 0x32
 8002af0:	4a15      	ldr	r2, [pc, #84]	@ (8002b48 <UART_SetConfig+0x118>)
 8002af2:	fba2 2303 	umull	r2, r3, r2, r3
 8002af6:	095b      	lsrs	r3, r3, #5
 8002af8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002afc:	4419      	add	r1, r3
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	4613      	mov	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	4413      	add	r3, r2
 8002b06:	009a      	lsls	r2, r3, #2
 8002b08:	441a      	add	r2, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b14:	4b0c      	ldr	r3, [pc, #48]	@ (8002b48 <UART_SetConfig+0x118>)
 8002b16:	fba3 0302 	umull	r0, r3, r3, r2
 8002b1a:	095b      	lsrs	r3, r3, #5
 8002b1c:	2064      	movs	r0, #100	@ 0x64
 8002b1e:	fb00 f303 	mul.w	r3, r0, r3
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	011b      	lsls	r3, r3, #4
 8002b26:	3332      	adds	r3, #50	@ 0x32
 8002b28:	4a07      	ldr	r2, [pc, #28]	@ (8002b48 <UART_SetConfig+0x118>)
 8002b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2e:	095b      	lsrs	r3, r3, #5
 8002b30:	f003 020f 	and.w	r2, r3, #15
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	440a      	add	r2, r1
 8002b3a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002b3c:	bf00      	nop
 8002b3e:	3710      	adds	r7, #16
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40013800 	.word	0x40013800
 8002b48:	51eb851f 	.word	0x51eb851f

08002b4c <sniprintf>:
 8002b4c:	b40c      	push	{r2, r3}
 8002b4e:	b530      	push	{r4, r5, lr}
 8002b50:	4b18      	ldr	r3, [pc, #96]	@ (8002bb4 <sniprintf+0x68>)
 8002b52:	1e0c      	subs	r4, r1, #0
 8002b54:	681d      	ldr	r5, [r3, #0]
 8002b56:	b09d      	sub	sp, #116	@ 0x74
 8002b58:	da08      	bge.n	8002b6c <sniprintf+0x20>
 8002b5a:	238b      	movs	r3, #139	@ 0x8b
 8002b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b60:	602b      	str	r3, [r5, #0]
 8002b62:	b01d      	add	sp, #116	@ 0x74
 8002b64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002b68:	b002      	add	sp, #8
 8002b6a:	4770      	bx	lr
 8002b6c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8002b70:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002b74:	f04f 0300 	mov.w	r3, #0
 8002b78:	931b      	str	r3, [sp, #108]	@ 0x6c
 8002b7a:	bf0c      	ite	eq
 8002b7c:	4623      	moveq	r3, r4
 8002b7e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002b82:	9304      	str	r3, [sp, #16]
 8002b84:	9307      	str	r3, [sp, #28]
 8002b86:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b8a:	9002      	str	r0, [sp, #8]
 8002b8c:	9006      	str	r0, [sp, #24]
 8002b8e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002b92:	4628      	mov	r0, r5
 8002b94:	ab21      	add	r3, sp, #132	@ 0x84
 8002b96:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8002b98:	a902      	add	r1, sp, #8
 8002b9a:	9301      	str	r3, [sp, #4]
 8002b9c:	f000 fa02 	bl	8002fa4 <_svfiprintf_r>
 8002ba0:	1c43      	adds	r3, r0, #1
 8002ba2:	bfbc      	itt	lt
 8002ba4:	238b      	movlt	r3, #139	@ 0x8b
 8002ba6:	602b      	strlt	r3, [r5, #0]
 8002ba8:	2c00      	cmp	r4, #0
 8002baa:	d0da      	beq.n	8002b62 <sniprintf+0x16>
 8002bac:	2200      	movs	r2, #0
 8002bae:	9b02      	ldr	r3, [sp, #8]
 8002bb0:	701a      	strb	r2, [r3, #0]
 8002bb2:	e7d6      	b.n	8002b62 <sniprintf+0x16>
 8002bb4:	2000000c 	.word	0x2000000c

08002bb8 <siprintf>:
 8002bb8:	b40e      	push	{r1, r2, r3}
 8002bba:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002bbe:	b510      	push	{r4, lr}
 8002bc0:	2400      	movs	r4, #0
 8002bc2:	b09d      	sub	sp, #116	@ 0x74
 8002bc4:	ab1f      	add	r3, sp, #124	@ 0x7c
 8002bc6:	9002      	str	r0, [sp, #8]
 8002bc8:	9006      	str	r0, [sp, #24]
 8002bca:	9107      	str	r1, [sp, #28]
 8002bcc:	9104      	str	r1, [sp, #16]
 8002bce:	4809      	ldr	r0, [pc, #36]	@ (8002bf4 <siprintf+0x3c>)
 8002bd0:	4909      	ldr	r1, [pc, #36]	@ (8002bf8 <siprintf+0x40>)
 8002bd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8002bd6:	9105      	str	r1, [sp, #20]
 8002bd8:	6800      	ldr	r0, [r0, #0]
 8002bda:	a902      	add	r1, sp, #8
 8002bdc:	9301      	str	r3, [sp, #4]
 8002bde:	941b      	str	r4, [sp, #108]	@ 0x6c
 8002be0:	f000 f9e0 	bl	8002fa4 <_svfiprintf_r>
 8002be4:	9b02      	ldr	r3, [sp, #8]
 8002be6:	701c      	strb	r4, [r3, #0]
 8002be8:	b01d      	add	sp, #116	@ 0x74
 8002bea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002bee:	b003      	add	sp, #12
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	2000000c 	.word	0x2000000c
 8002bf8:	ffff0208 	.word	0xffff0208

08002bfc <memcmp>:
 8002bfc:	b510      	push	{r4, lr}
 8002bfe:	3901      	subs	r1, #1
 8002c00:	4402      	add	r2, r0
 8002c02:	4290      	cmp	r0, r2
 8002c04:	d101      	bne.n	8002c0a <memcmp+0xe>
 8002c06:	2000      	movs	r0, #0
 8002c08:	e005      	b.n	8002c16 <memcmp+0x1a>
 8002c0a:	7803      	ldrb	r3, [r0, #0]
 8002c0c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8002c10:	42a3      	cmp	r3, r4
 8002c12:	d001      	beq.n	8002c18 <memcmp+0x1c>
 8002c14:	1b18      	subs	r0, r3, r4
 8002c16:	bd10      	pop	{r4, pc}
 8002c18:	3001      	adds	r0, #1
 8002c1a:	e7f2      	b.n	8002c02 <memcmp+0x6>

08002c1c <memmove>:
 8002c1c:	4288      	cmp	r0, r1
 8002c1e:	b510      	push	{r4, lr}
 8002c20:	eb01 0402 	add.w	r4, r1, r2
 8002c24:	d902      	bls.n	8002c2c <memmove+0x10>
 8002c26:	4284      	cmp	r4, r0
 8002c28:	4623      	mov	r3, r4
 8002c2a:	d807      	bhi.n	8002c3c <memmove+0x20>
 8002c2c:	1e43      	subs	r3, r0, #1
 8002c2e:	42a1      	cmp	r1, r4
 8002c30:	d008      	beq.n	8002c44 <memmove+0x28>
 8002c32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002c36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002c3a:	e7f8      	b.n	8002c2e <memmove+0x12>
 8002c3c:	4601      	mov	r1, r0
 8002c3e:	4402      	add	r2, r0
 8002c40:	428a      	cmp	r2, r1
 8002c42:	d100      	bne.n	8002c46 <memmove+0x2a>
 8002c44:	bd10      	pop	{r4, pc}
 8002c46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002c4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002c4e:	e7f7      	b.n	8002c40 <memmove+0x24>

08002c50 <memset>:
 8002c50:	4603      	mov	r3, r0
 8002c52:	4402      	add	r2, r0
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d100      	bne.n	8002c5a <memset+0xa>
 8002c58:	4770      	bx	lr
 8002c5a:	f803 1b01 	strb.w	r1, [r3], #1
 8002c5e:	e7f9      	b.n	8002c54 <memset+0x4>

08002c60 <strstr>:
 8002c60:	780a      	ldrb	r2, [r1, #0]
 8002c62:	b570      	push	{r4, r5, r6, lr}
 8002c64:	b96a      	cbnz	r2, 8002c82 <strstr+0x22>
 8002c66:	bd70      	pop	{r4, r5, r6, pc}
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d109      	bne.n	8002c80 <strstr+0x20>
 8002c6c:	460c      	mov	r4, r1
 8002c6e:	4605      	mov	r5, r0
 8002c70:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d0f6      	beq.n	8002c66 <strstr+0x6>
 8002c78:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8002c7c:	429e      	cmp	r6, r3
 8002c7e:	d0f7      	beq.n	8002c70 <strstr+0x10>
 8002c80:	3001      	adds	r0, #1
 8002c82:	7803      	ldrb	r3, [r0, #0]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d1ef      	bne.n	8002c68 <strstr+0x8>
 8002c88:	4618      	mov	r0, r3
 8002c8a:	e7ec      	b.n	8002c66 <strstr+0x6>

08002c8c <__errno>:
 8002c8c:	4b01      	ldr	r3, [pc, #4]	@ (8002c94 <__errno+0x8>)
 8002c8e:	6818      	ldr	r0, [r3, #0]
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	2000000c 	.word	0x2000000c

08002c98 <__libc_init_array>:
 8002c98:	b570      	push	{r4, r5, r6, lr}
 8002c9a:	2600      	movs	r6, #0
 8002c9c:	4d0c      	ldr	r5, [pc, #48]	@ (8002cd0 <__libc_init_array+0x38>)
 8002c9e:	4c0d      	ldr	r4, [pc, #52]	@ (8002cd4 <__libc_init_array+0x3c>)
 8002ca0:	1b64      	subs	r4, r4, r5
 8002ca2:	10a4      	asrs	r4, r4, #2
 8002ca4:	42a6      	cmp	r6, r4
 8002ca6:	d109      	bne.n	8002cbc <__libc_init_array+0x24>
 8002ca8:	f000 fc5c 	bl	8003564 <_init>
 8002cac:	2600      	movs	r6, #0
 8002cae:	4d0a      	ldr	r5, [pc, #40]	@ (8002cd8 <__libc_init_array+0x40>)
 8002cb0:	4c0a      	ldr	r4, [pc, #40]	@ (8002cdc <__libc_init_array+0x44>)
 8002cb2:	1b64      	subs	r4, r4, r5
 8002cb4:	10a4      	asrs	r4, r4, #2
 8002cb6:	42a6      	cmp	r6, r4
 8002cb8:	d105      	bne.n	8002cc6 <__libc_init_array+0x2e>
 8002cba:	bd70      	pop	{r4, r5, r6, pc}
 8002cbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cc0:	4798      	blx	r3
 8002cc2:	3601      	adds	r6, #1
 8002cc4:	e7ee      	b.n	8002ca4 <__libc_init_array+0xc>
 8002cc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cca:	4798      	blx	r3
 8002ccc:	3601      	adds	r6, #1
 8002cce:	e7f2      	b.n	8002cb6 <__libc_init_array+0x1e>
 8002cd0:	080038fc 	.word	0x080038fc
 8002cd4:	080038fc 	.word	0x080038fc
 8002cd8:	080038fc 	.word	0x080038fc
 8002cdc:	08003900 	.word	0x08003900

08002ce0 <__retarget_lock_acquire_recursive>:
 8002ce0:	4770      	bx	lr

08002ce2 <__retarget_lock_release_recursive>:
 8002ce2:	4770      	bx	lr

08002ce4 <memcpy>:
 8002ce4:	440a      	add	r2, r1
 8002ce6:	4291      	cmp	r1, r2
 8002ce8:	f100 33ff 	add.w	r3, r0, #4294967295
 8002cec:	d100      	bne.n	8002cf0 <memcpy+0xc>
 8002cee:	4770      	bx	lr
 8002cf0:	b510      	push	{r4, lr}
 8002cf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002cf6:	4291      	cmp	r1, r2
 8002cf8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002cfc:	d1f9      	bne.n	8002cf2 <memcpy+0xe>
 8002cfe:	bd10      	pop	{r4, pc}

08002d00 <_free_r>:
 8002d00:	b538      	push	{r3, r4, r5, lr}
 8002d02:	4605      	mov	r5, r0
 8002d04:	2900      	cmp	r1, #0
 8002d06:	d040      	beq.n	8002d8a <_free_r+0x8a>
 8002d08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d0c:	1f0c      	subs	r4, r1, #4
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	bfb8      	it	lt
 8002d12:	18e4      	addlt	r4, r4, r3
 8002d14:	f000 f8de 	bl	8002ed4 <__malloc_lock>
 8002d18:	4a1c      	ldr	r2, [pc, #112]	@ (8002d8c <_free_r+0x8c>)
 8002d1a:	6813      	ldr	r3, [r2, #0]
 8002d1c:	b933      	cbnz	r3, 8002d2c <_free_r+0x2c>
 8002d1e:	6063      	str	r3, [r4, #4]
 8002d20:	6014      	str	r4, [r2, #0]
 8002d22:	4628      	mov	r0, r5
 8002d24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002d28:	f000 b8da 	b.w	8002ee0 <__malloc_unlock>
 8002d2c:	42a3      	cmp	r3, r4
 8002d2e:	d908      	bls.n	8002d42 <_free_r+0x42>
 8002d30:	6820      	ldr	r0, [r4, #0]
 8002d32:	1821      	adds	r1, r4, r0
 8002d34:	428b      	cmp	r3, r1
 8002d36:	bf01      	itttt	eq
 8002d38:	6819      	ldreq	r1, [r3, #0]
 8002d3a:	685b      	ldreq	r3, [r3, #4]
 8002d3c:	1809      	addeq	r1, r1, r0
 8002d3e:	6021      	streq	r1, [r4, #0]
 8002d40:	e7ed      	b.n	8002d1e <_free_r+0x1e>
 8002d42:	461a      	mov	r2, r3
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	b10b      	cbz	r3, 8002d4c <_free_r+0x4c>
 8002d48:	42a3      	cmp	r3, r4
 8002d4a:	d9fa      	bls.n	8002d42 <_free_r+0x42>
 8002d4c:	6811      	ldr	r1, [r2, #0]
 8002d4e:	1850      	adds	r0, r2, r1
 8002d50:	42a0      	cmp	r0, r4
 8002d52:	d10b      	bne.n	8002d6c <_free_r+0x6c>
 8002d54:	6820      	ldr	r0, [r4, #0]
 8002d56:	4401      	add	r1, r0
 8002d58:	1850      	adds	r0, r2, r1
 8002d5a:	4283      	cmp	r3, r0
 8002d5c:	6011      	str	r1, [r2, #0]
 8002d5e:	d1e0      	bne.n	8002d22 <_free_r+0x22>
 8002d60:	6818      	ldr	r0, [r3, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	4408      	add	r0, r1
 8002d66:	6010      	str	r0, [r2, #0]
 8002d68:	6053      	str	r3, [r2, #4]
 8002d6a:	e7da      	b.n	8002d22 <_free_r+0x22>
 8002d6c:	d902      	bls.n	8002d74 <_free_r+0x74>
 8002d6e:	230c      	movs	r3, #12
 8002d70:	602b      	str	r3, [r5, #0]
 8002d72:	e7d6      	b.n	8002d22 <_free_r+0x22>
 8002d74:	6820      	ldr	r0, [r4, #0]
 8002d76:	1821      	adds	r1, r4, r0
 8002d78:	428b      	cmp	r3, r1
 8002d7a:	bf01      	itttt	eq
 8002d7c:	6819      	ldreq	r1, [r3, #0]
 8002d7e:	685b      	ldreq	r3, [r3, #4]
 8002d80:	1809      	addeq	r1, r1, r0
 8002d82:	6021      	streq	r1, [r4, #0]
 8002d84:	6063      	str	r3, [r4, #4]
 8002d86:	6054      	str	r4, [r2, #4]
 8002d88:	e7cb      	b.n	8002d22 <_free_r+0x22>
 8002d8a:	bd38      	pop	{r3, r4, r5, pc}
 8002d8c:	20000558 	.word	0x20000558

08002d90 <sbrk_aligned>:
 8002d90:	b570      	push	{r4, r5, r6, lr}
 8002d92:	4e0f      	ldr	r6, [pc, #60]	@ (8002dd0 <sbrk_aligned+0x40>)
 8002d94:	460c      	mov	r4, r1
 8002d96:	6831      	ldr	r1, [r6, #0]
 8002d98:	4605      	mov	r5, r0
 8002d9a:	b911      	cbnz	r1, 8002da2 <sbrk_aligned+0x12>
 8002d9c:	f000 fb8e 	bl	80034bc <_sbrk_r>
 8002da0:	6030      	str	r0, [r6, #0]
 8002da2:	4621      	mov	r1, r4
 8002da4:	4628      	mov	r0, r5
 8002da6:	f000 fb89 	bl	80034bc <_sbrk_r>
 8002daa:	1c43      	adds	r3, r0, #1
 8002dac:	d103      	bne.n	8002db6 <sbrk_aligned+0x26>
 8002dae:	f04f 34ff 	mov.w	r4, #4294967295
 8002db2:	4620      	mov	r0, r4
 8002db4:	bd70      	pop	{r4, r5, r6, pc}
 8002db6:	1cc4      	adds	r4, r0, #3
 8002db8:	f024 0403 	bic.w	r4, r4, #3
 8002dbc:	42a0      	cmp	r0, r4
 8002dbe:	d0f8      	beq.n	8002db2 <sbrk_aligned+0x22>
 8002dc0:	1a21      	subs	r1, r4, r0
 8002dc2:	4628      	mov	r0, r5
 8002dc4:	f000 fb7a 	bl	80034bc <_sbrk_r>
 8002dc8:	3001      	adds	r0, #1
 8002dca:	d1f2      	bne.n	8002db2 <sbrk_aligned+0x22>
 8002dcc:	e7ef      	b.n	8002dae <sbrk_aligned+0x1e>
 8002dce:	bf00      	nop
 8002dd0:	20000554 	.word	0x20000554

08002dd4 <_malloc_r>:
 8002dd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002dd8:	1ccd      	adds	r5, r1, #3
 8002dda:	f025 0503 	bic.w	r5, r5, #3
 8002dde:	3508      	adds	r5, #8
 8002de0:	2d0c      	cmp	r5, #12
 8002de2:	bf38      	it	cc
 8002de4:	250c      	movcc	r5, #12
 8002de6:	2d00      	cmp	r5, #0
 8002de8:	4606      	mov	r6, r0
 8002dea:	db01      	blt.n	8002df0 <_malloc_r+0x1c>
 8002dec:	42a9      	cmp	r1, r5
 8002dee:	d904      	bls.n	8002dfa <_malloc_r+0x26>
 8002df0:	230c      	movs	r3, #12
 8002df2:	6033      	str	r3, [r6, #0]
 8002df4:	2000      	movs	r0, #0
 8002df6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002dfa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002ed0 <_malloc_r+0xfc>
 8002dfe:	f000 f869 	bl	8002ed4 <__malloc_lock>
 8002e02:	f8d8 3000 	ldr.w	r3, [r8]
 8002e06:	461c      	mov	r4, r3
 8002e08:	bb44      	cbnz	r4, 8002e5c <_malloc_r+0x88>
 8002e0a:	4629      	mov	r1, r5
 8002e0c:	4630      	mov	r0, r6
 8002e0e:	f7ff ffbf 	bl	8002d90 <sbrk_aligned>
 8002e12:	1c43      	adds	r3, r0, #1
 8002e14:	4604      	mov	r4, r0
 8002e16:	d158      	bne.n	8002eca <_malloc_r+0xf6>
 8002e18:	f8d8 4000 	ldr.w	r4, [r8]
 8002e1c:	4627      	mov	r7, r4
 8002e1e:	2f00      	cmp	r7, #0
 8002e20:	d143      	bne.n	8002eaa <_malloc_r+0xd6>
 8002e22:	2c00      	cmp	r4, #0
 8002e24:	d04b      	beq.n	8002ebe <_malloc_r+0xea>
 8002e26:	6823      	ldr	r3, [r4, #0]
 8002e28:	4639      	mov	r1, r7
 8002e2a:	4630      	mov	r0, r6
 8002e2c:	eb04 0903 	add.w	r9, r4, r3
 8002e30:	f000 fb44 	bl	80034bc <_sbrk_r>
 8002e34:	4581      	cmp	r9, r0
 8002e36:	d142      	bne.n	8002ebe <_malloc_r+0xea>
 8002e38:	6821      	ldr	r1, [r4, #0]
 8002e3a:	4630      	mov	r0, r6
 8002e3c:	1a6d      	subs	r5, r5, r1
 8002e3e:	4629      	mov	r1, r5
 8002e40:	f7ff ffa6 	bl	8002d90 <sbrk_aligned>
 8002e44:	3001      	adds	r0, #1
 8002e46:	d03a      	beq.n	8002ebe <_malloc_r+0xea>
 8002e48:	6823      	ldr	r3, [r4, #0]
 8002e4a:	442b      	add	r3, r5
 8002e4c:	6023      	str	r3, [r4, #0]
 8002e4e:	f8d8 3000 	ldr.w	r3, [r8]
 8002e52:	685a      	ldr	r2, [r3, #4]
 8002e54:	bb62      	cbnz	r2, 8002eb0 <_malloc_r+0xdc>
 8002e56:	f8c8 7000 	str.w	r7, [r8]
 8002e5a:	e00f      	b.n	8002e7c <_malloc_r+0xa8>
 8002e5c:	6822      	ldr	r2, [r4, #0]
 8002e5e:	1b52      	subs	r2, r2, r5
 8002e60:	d420      	bmi.n	8002ea4 <_malloc_r+0xd0>
 8002e62:	2a0b      	cmp	r2, #11
 8002e64:	d917      	bls.n	8002e96 <_malloc_r+0xc2>
 8002e66:	1961      	adds	r1, r4, r5
 8002e68:	42a3      	cmp	r3, r4
 8002e6a:	6025      	str	r5, [r4, #0]
 8002e6c:	bf18      	it	ne
 8002e6e:	6059      	strne	r1, [r3, #4]
 8002e70:	6863      	ldr	r3, [r4, #4]
 8002e72:	bf08      	it	eq
 8002e74:	f8c8 1000 	streq.w	r1, [r8]
 8002e78:	5162      	str	r2, [r4, r5]
 8002e7a:	604b      	str	r3, [r1, #4]
 8002e7c:	4630      	mov	r0, r6
 8002e7e:	f000 f82f 	bl	8002ee0 <__malloc_unlock>
 8002e82:	f104 000b 	add.w	r0, r4, #11
 8002e86:	1d23      	adds	r3, r4, #4
 8002e88:	f020 0007 	bic.w	r0, r0, #7
 8002e8c:	1ac2      	subs	r2, r0, r3
 8002e8e:	bf1c      	itt	ne
 8002e90:	1a1b      	subne	r3, r3, r0
 8002e92:	50a3      	strne	r3, [r4, r2]
 8002e94:	e7af      	b.n	8002df6 <_malloc_r+0x22>
 8002e96:	6862      	ldr	r2, [r4, #4]
 8002e98:	42a3      	cmp	r3, r4
 8002e9a:	bf0c      	ite	eq
 8002e9c:	f8c8 2000 	streq.w	r2, [r8]
 8002ea0:	605a      	strne	r2, [r3, #4]
 8002ea2:	e7eb      	b.n	8002e7c <_malloc_r+0xa8>
 8002ea4:	4623      	mov	r3, r4
 8002ea6:	6864      	ldr	r4, [r4, #4]
 8002ea8:	e7ae      	b.n	8002e08 <_malloc_r+0x34>
 8002eaa:	463c      	mov	r4, r7
 8002eac:	687f      	ldr	r7, [r7, #4]
 8002eae:	e7b6      	b.n	8002e1e <_malloc_r+0x4a>
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	42a3      	cmp	r3, r4
 8002eb6:	d1fb      	bne.n	8002eb0 <_malloc_r+0xdc>
 8002eb8:	2300      	movs	r3, #0
 8002eba:	6053      	str	r3, [r2, #4]
 8002ebc:	e7de      	b.n	8002e7c <_malloc_r+0xa8>
 8002ebe:	230c      	movs	r3, #12
 8002ec0:	4630      	mov	r0, r6
 8002ec2:	6033      	str	r3, [r6, #0]
 8002ec4:	f000 f80c 	bl	8002ee0 <__malloc_unlock>
 8002ec8:	e794      	b.n	8002df4 <_malloc_r+0x20>
 8002eca:	6005      	str	r5, [r0, #0]
 8002ecc:	e7d6      	b.n	8002e7c <_malloc_r+0xa8>
 8002ece:	bf00      	nop
 8002ed0:	20000558 	.word	0x20000558

08002ed4 <__malloc_lock>:
 8002ed4:	4801      	ldr	r0, [pc, #4]	@ (8002edc <__malloc_lock+0x8>)
 8002ed6:	f7ff bf03 	b.w	8002ce0 <__retarget_lock_acquire_recursive>
 8002eda:	bf00      	nop
 8002edc:	20000550 	.word	0x20000550

08002ee0 <__malloc_unlock>:
 8002ee0:	4801      	ldr	r0, [pc, #4]	@ (8002ee8 <__malloc_unlock+0x8>)
 8002ee2:	f7ff befe 	b.w	8002ce2 <__retarget_lock_release_recursive>
 8002ee6:	bf00      	nop
 8002ee8:	20000550 	.word	0x20000550

08002eec <__ssputs_r>:
 8002eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ef0:	461f      	mov	r7, r3
 8002ef2:	688e      	ldr	r6, [r1, #8]
 8002ef4:	4682      	mov	sl, r0
 8002ef6:	42be      	cmp	r6, r7
 8002ef8:	460c      	mov	r4, r1
 8002efa:	4690      	mov	r8, r2
 8002efc:	680b      	ldr	r3, [r1, #0]
 8002efe:	d82d      	bhi.n	8002f5c <__ssputs_r+0x70>
 8002f00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002f04:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002f08:	d026      	beq.n	8002f58 <__ssputs_r+0x6c>
 8002f0a:	6965      	ldr	r5, [r4, #20]
 8002f0c:	6909      	ldr	r1, [r1, #16]
 8002f0e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002f12:	eba3 0901 	sub.w	r9, r3, r1
 8002f16:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002f1a:	1c7b      	adds	r3, r7, #1
 8002f1c:	444b      	add	r3, r9
 8002f1e:	106d      	asrs	r5, r5, #1
 8002f20:	429d      	cmp	r5, r3
 8002f22:	bf38      	it	cc
 8002f24:	461d      	movcc	r5, r3
 8002f26:	0553      	lsls	r3, r2, #21
 8002f28:	d527      	bpl.n	8002f7a <__ssputs_r+0x8e>
 8002f2a:	4629      	mov	r1, r5
 8002f2c:	f7ff ff52 	bl	8002dd4 <_malloc_r>
 8002f30:	4606      	mov	r6, r0
 8002f32:	b360      	cbz	r0, 8002f8e <__ssputs_r+0xa2>
 8002f34:	464a      	mov	r2, r9
 8002f36:	6921      	ldr	r1, [r4, #16]
 8002f38:	f7ff fed4 	bl	8002ce4 <memcpy>
 8002f3c:	89a3      	ldrh	r3, [r4, #12]
 8002f3e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002f42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f46:	81a3      	strh	r3, [r4, #12]
 8002f48:	6126      	str	r6, [r4, #16]
 8002f4a:	444e      	add	r6, r9
 8002f4c:	6026      	str	r6, [r4, #0]
 8002f4e:	463e      	mov	r6, r7
 8002f50:	6165      	str	r5, [r4, #20]
 8002f52:	eba5 0509 	sub.w	r5, r5, r9
 8002f56:	60a5      	str	r5, [r4, #8]
 8002f58:	42be      	cmp	r6, r7
 8002f5a:	d900      	bls.n	8002f5e <__ssputs_r+0x72>
 8002f5c:	463e      	mov	r6, r7
 8002f5e:	4632      	mov	r2, r6
 8002f60:	4641      	mov	r1, r8
 8002f62:	6820      	ldr	r0, [r4, #0]
 8002f64:	f7ff fe5a 	bl	8002c1c <memmove>
 8002f68:	2000      	movs	r0, #0
 8002f6a:	68a3      	ldr	r3, [r4, #8]
 8002f6c:	1b9b      	subs	r3, r3, r6
 8002f6e:	60a3      	str	r3, [r4, #8]
 8002f70:	6823      	ldr	r3, [r4, #0]
 8002f72:	4433      	add	r3, r6
 8002f74:	6023      	str	r3, [r4, #0]
 8002f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f7a:	462a      	mov	r2, r5
 8002f7c:	f000 fabc 	bl	80034f8 <_realloc_r>
 8002f80:	4606      	mov	r6, r0
 8002f82:	2800      	cmp	r0, #0
 8002f84:	d1e0      	bne.n	8002f48 <__ssputs_r+0x5c>
 8002f86:	4650      	mov	r0, sl
 8002f88:	6921      	ldr	r1, [r4, #16]
 8002f8a:	f7ff feb9 	bl	8002d00 <_free_r>
 8002f8e:	230c      	movs	r3, #12
 8002f90:	f8ca 3000 	str.w	r3, [sl]
 8002f94:	89a3      	ldrh	r3, [r4, #12]
 8002f96:	f04f 30ff 	mov.w	r0, #4294967295
 8002f9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f9e:	81a3      	strh	r3, [r4, #12]
 8002fa0:	e7e9      	b.n	8002f76 <__ssputs_r+0x8a>
	...

08002fa4 <_svfiprintf_r>:
 8002fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fa8:	4698      	mov	r8, r3
 8002faa:	898b      	ldrh	r3, [r1, #12]
 8002fac:	4607      	mov	r7, r0
 8002fae:	061b      	lsls	r3, r3, #24
 8002fb0:	460d      	mov	r5, r1
 8002fb2:	4614      	mov	r4, r2
 8002fb4:	b09d      	sub	sp, #116	@ 0x74
 8002fb6:	d510      	bpl.n	8002fda <_svfiprintf_r+0x36>
 8002fb8:	690b      	ldr	r3, [r1, #16]
 8002fba:	b973      	cbnz	r3, 8002fda <_svfiprintf_r+0x36>
 8002fbc:	2140      	movs	r1, #64	@ 0x40
 8002fbe:	f7ff ff09 	bl	8002dd4 <_malloc_r>
 8002fc2:	6028      	str	r0, [r5, #0]
 8002fc4:	6128      	str	r0, [r5, #16]
 8002fc6:	b930      	cbnz	r0, 8002fd6 <_svfiprintf_r+0x32>
 8002fc8:	230c      	movs	r3, #12
 8002fca:	603b      	str	r3, [r7, #0]
 8002fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8002fd0:	b01d      	add	sp, #116	@ 0x74
 8002fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fd6:	2340      	movs	r3, #64	@ 0x40
 8002fd8:	616b      	str	r3, [r5, #20]
 8002fda:	2300      	movs	r3, #0
 8002fdc:	9309      	str	r3, [sp, #36]	@ 0x24
 8002fde:	2320      	movs	r3, #32
 8002fe0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002fe4:	2330      	movs	r3, #48	@ 0x30
 8002fe6:	f04f 0901 	mov.w	r9, #1
 8002fea:	f8cd 800c 	str.w	r8, [sp, #12]
 8002fee:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003188 <_svfiprintf_r+0x1e4>
 8002ff2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002ff6:	4623      	mov	r3, r4
 8002ff8:	469a      	mov	sl, r3
 8002ffa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002ffe:	b10a      	cbz	r2, 8003004 <_svfiprintf_r+0x60>
 8003000:	2a25      	cmp	r2, #37	@ 0x25
 8003002:	d1f9      	bne.n	8002ff8 <_svfiprintf_r+0x54>
 8003004:	ebba 0b04 	subs.w	fp, sl, r4
 8003008:	d00b      	beq.n	8003022 <_svfiprintf_r+0x7e>
 800300a:	465b      	mov	r3, fp
 800300c:	4622      	mov	r2, r4
 800300e:	4629      	mov	r1, r5
 8003010:	4638      	mov	r0, r7
 8003012:	f7ff ff6b 	bl	8002eec <__ssputs_r>
 8003016:	3001      	adds	r0, #1
 8003018:	f000 80a7 	beq.w	800316a <_svfiprintf_r+0x1c6>
 800301c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800301e:	445a      	add	r2, fp
 8003020:	9209      	str	r2, [sp, #36]	@ 0x24
 8003022:	f89a 3000 	ldrb.w	r3, [sl]
 8003026:	2b00      	cmp	r3, #0
 8003028:	f000 809f 	beq.w	800316a <_svfiprintf_r+0x1c6>
 800302c:	2300      	movs	r3, #0
 800302e:	f04f 32ff 	mov.w	r2, #4294967295
 8003032:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003036:	f10a 0a01 	add.w	sl, sl, #1
 800303a:	9304      	str	r3, [sp, #16]
 800303c:	9307      	str	r3, [sp, #28]
 800303e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003042:	931a      	str	r3, [sp, #104]	@ 0x68
 8003044:	4654      	mov	r4, sl
 8003046:	2205      	movs	r2, #5
 8003048:	f814 1b01 	ldrb.w	r1, [r4], #1
 800304c:	484e      	ldr	r0, [pc, #312]	@ (8003188 <_svfiprintf_r+0x1e4>)
 800304e:	f000 fa45 	bl	80034dc <memchr>
 8003052:	9a04      	ldr	r2, [sp, #16]
 8003054:	b9d8      	cbnz	r0, 800308e <_svfiprintf_r+0xea>
 8003056:	06d0      	lsls	r0, r2, #27
 8003058:	bf44      	itt	mi
 800305a:	2320      	movmi	r3, #32
 800305c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003060:	0711      	lsls	r1, r2, #28
 8003062:	bf44      	itt	mi
 8003064:	232b      	movmi	r3, #43	@ 0x2b
 8003066:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800306a:	f89a 3000 	ldrb.w	r3, [sl]
 800306e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003070:	d015      	beq.n	800309e <_svfiprintf_r+0xfa>
 8003072:	4654      	mov	r4, sl
 8003074:	2000      	movs	r0, #0
 8003076:	f04f 0c0a 	mov.w	ip, #10
 800307a:	9a07      	ldr	r2, [sp, #28]
 800307c:	4621      	mov	r1, r4
 800307e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003082:	3b30      	subs	r3, #48	@ 0x30
 8003084:	2b09      	cmp	r3, #9
 8003086:	d94b      	bls.n	8003120 <_svfiprintf_r+0x17c>
 8003088:	b1b0      	cbz	r0, 80030b8 <_svfiprintf_r+0x114>
 800308a:	9207      	str	r2, [sp, #28]
 800308c:	e014      	b.n	80030b8 <_svfiprintf_r+0x114>
 800308e:	eba0 0308 	sub.w	r3, r0, r8
 8003092:	fa09 f303 	lsl.w	r3, r9, r3
 8003096:	4313      	orrs	r3, r2
 8003098:	46a2      	mov	sl, r4
 800309a:	9304      	str	r3, [sp, #16]
 800309c:	e7d2      	b.n	8003044 <_svfiprintf_r+0xa0>
 800309e:	9b03      	ldr	r3, [sp, #12]
 80030a0:	1d19      	adds	r1, r3, #4
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	9103      	str	r1, [sp, #12]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	bfbb      	ittet	lt
 80030aa:	425b      	neglt	r3, r3
 80030ac:	f042 0202 	orrlt.w	r2, r2, #2
 80030b0:	9307      	strge	r3, [sp, #28]
 80030b2:	9307      	strlt	r3, [sp, #28]
 80030b4:	bfb8      	it	lt
 80030b6:	9204      	strlt	r2, [sp, #16]
 80030b8:	7823      	ldrb	r3, [r4, #0]
 80030ba:	2b2e      	cmp	r3, #46	@ 0x2e
 80030bc:	d10a      	bne.n	80030d4 <_svfiprintf_r+0x130>
 80030be:	7863      	ldrb	r3, [r4, #1]
 80030c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80030c2:	d132      	bne.n	800312a <_svfiprintf_r+0x186>
 80030c4:	9b03      	ldr	r3, [sp, #12]
 80030c6:	3402      	adds	r4, #2
 80030c8:	1d1a      	adds	r2, r3, #4
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	9203      	str	r2, [sp, #12]
 80030ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80030d2:	9305      	str	r3, [sp, #20]
 80030d4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800318c <_svfiprintf_r+0x1e8>
 80030d8:	2203      	movs	r2, #3
 80030da:	4650      	mov	r0, sl
 80030dc:	7821      	ldrb	r1, [r4, #0]
 80030de:	f000 f9fd 	bl	80034dc <memchr>
 80030e2:	b138      	cbz	r0, 80030f4 <_svfiprintf_r+0x150>
 80030e4:	2240      	movs	r2, #64	@ 0x40
 80030e6:	9b04      	ldr	r3, [sp, #16]
 80030e8:	eba0 000a 	sub.w	r0, r0, sl
 80030ec:	4082      	lsls	r2, r0
 80030ee:	4313      	orrs	r3, r2
 80030f0:	3401      	adds	r4, #1
 80030f2:	9304      	str	r3, [sp, #16]
 80030f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030f8:	2206      	movs	r2, #6
 80030fa:	4825      	ldr	r0, [pc, #148]	@ (8003190 <_svfiprintf_r+0x1ec>)
 80030fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003100:	f000 f9ec 	bl	80034dc <memchr>
 8003104:	2800      	cmp	r0, #0
 8003106:	d036      	beq.n	8003176 <_svfiprintf_r+0x1d2>
 8003108:	4b22      	ldr	r3, [pc, #136]	@ (8003194 <_svfiprintf_r+0x1f0>)
 800310a:	bb1b      	cbnz	r3, 8003154 <_svfiprintf_r+0x1b0>
 800310c:	9b03      	ldr	r3, [sp, #12]
 800310e:	3307      	adds	r3, #7
 8003110:	f023 0307 	bic.w	r3, r3, #7
 8003114:	3308      	adds	r3, #8
 8003116:	9303      	str	r3, [sp, #12]
 8003118:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800311a:	4433      	add	r3, r6
 800311c:	9309      	str	r3, [sp, #36]	@ 0x24
 800311e:	e76a      	b.n	8002ff6 <_svfiprintf_r+0x52>
 8003120:	460c      	mov	r4, r1
 8003122:	2001      	movs	r0, #1
 8003124:	fb0c 3202 	mla	r2, ip, r2, r3
 8003128:	e7a8      	b.n	800307c <_svfiprintf_r+0xd8>
 800312a:	2300      	movs	r3, #0
 800312c:	f04f 0c0a 	mov.w	ip, #10
 8003130:	4619      	mov	r1, r3
 8003132:	3401      	adds	r4, #1
 8003134:	9305      	str	r3, [sp, #20]
 8003136:	4620      	mov	r0, r4
 8003138:	f810 2b01 	ldrb.w	r2, [r0], #1
 800313c:	3a30      	subs	r2, #48	@ 0x30
 800313e:	2a09      	cmp	r2, #9
 8003140:	d903      	bls.n	800314a <_svfiprintf_r+0x1a6>
 8003142:	2b00      	cmp	r3, #0
 8003144:	d0c6      	beq.n	80030d4 <_svfiprintf_r+0x130>
 8003146:	9105      	str	r1, [sp, #20]
 8003148:	e7c4      	b.n	80030d4 <_svfiprintf_r+0x130>
 800314a:	4604      	mov	r4, r0
 800314c:	2301      	movs	r3, #1
 800314e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003152:	e7f0      	b.n	8003136 <_svfiprintf_r+0x192>
 8003154:	ab03      	add	r3, sp, #12
 8003156:	9300      	str	r3, [sp, #0]
 8003158:	462a      	mov	r2, r5
 800315a:	4638      	mov	r0, r7
 800315c:	4b0e      	ldr	r3, [pc, #56]	@ (8003198 <_svfiprintf_r+0x1f4>)
 800315e:	a904      	add	r1, sp, #16
 8003160:	f3af 8000 	nop.w
 8003164:	1c42      	adds	r2, r0, #1
 8003166:	4606      	mov	r6, r0
 8003168:	d1d6      	bne.n	8003118 <_svfiprintf_r+0x174>
 800316a:	89ab      	ldrh	r3, [r5, #12]
 800316c:	065b      	lsls	r3, r3, #25
 800316e:	f53f af2d 	bmi.w	8002fcc <_svfiprintf_r+0x28>
 8003172:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003174:	e72c      	b.n	8002fd0 <_svfiprintf_r+0x2c>
 8003176:	ab03      	add	r3, sp, #12
 8003178:	9300      	str	r3, [sp, #0]
 800317a:	462a      	mov	r2, r5
 800317c:	4638      	mov	r0, r7
 800317e:	4b06      	ldr	r3, [pc, #24]	@ (8003198 <_svfiprintf_r+0x1f4>)
 8003180:	a904      	add	r1, sp, #16
 8003182:	f000 f87d 	bl	8003280 <_printf_i>
 8003186:	e7ed      	b.n	8003164 <_svfiprintf_r+0x1c0>
 8003188:	080038be 	.word	0x080038be
 800318c:	080038c4 	.word	0x080038c4
 8003190:	080038c8 	.word	0x080038c8
 8003194:	00000000 	.word	0x00000000
 8003198:	08002eed 	.word	0x08002eed

0800319c <_printf_common>:
 800319c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031a0:	4616      	mov	r6, r2
 80031a2:	4698      	mov	r8, r3
 80031a4:	688a      	ldr	r2, [r1, #8]
 80031a6:	690b      	ldr	r3, [r1, #16]
 80031a8:	4607      	mov	r7, r0
 80031aa:	4293      	cmp	r3, r2
 80031ac:	bfb8      	it	lt
 80031ae:	4613      	movlt	r3, r2
 80031b0:	6033      	str	r3, [r6, #0]
 80031b2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80031b6:	460c      	mov	r4, r1
 80031b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80031bc:	b10a      	cbz	r2, 80031c2 <_printf_common+0x26>
 80031be:	3301      	adds	r3, #1
 80031c0:	6033      	str	r3, [r6, #0]
 80031c2:	6823      	ldr	r3, [r4, #0]
 80031c4:	0699      	lsls	r1, r3, #26
 80031c6:	bf42      	ittt	mi
 80031c8:	6833      	ldrmi	r3, [r6, #0]
 80031ca:	3302      	addmi	r3, #2
 80031cc:	6033      	strmi	r3, [r6, #0]
 80031ce:	6825      	ldr	r5, [r4, #0]
 80031d0:	f015 0506 	ands.w	r5, r5, #6
 80031d4:	d106      	bne.n	80031e4 <_printf_common+0x48>
 80031d6:	f104 0a19 	add.w	sl, r4, #25
 80031da:	68e3      	ldr	r3, [r4, #12]
 80031dc:	6832      	ldr	r2, [r6, #0]
 80031de:	1a9b      	subs	r3, r3, r2
 80031e0:	42ab      	cmp	r3, r5
 80031e2:	dc2b      	bgt.n	800323c <_printf_common+0xa0>
 80031e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80031e8:	6822      	ldr	r2, [r4, #0]
 80031ea:	3b00      	subs	r3, #0
 80031ec:	bf18      	it	ne
 80031ee:	2301      	movne	r3, #1
 80031f0:	0692      	lsls	r2, r2, #26
 80031f2:	d430      	bmi.n	8003256 <_printf_common+0xba>
 80031f4:	4641      	mov	r1, r8
 80031f6:	4638      	mov	r0, r7
 80031f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80031fc:	47c8      	blx	r9
 80031fe:	3001      	adds	r0, #1
 8003200:	d023      	beq.n	800324a <_printf_common+0xae>
 8003202:	6823      	ldr	r3, [r4, #0]
 8003204:	6922      	ldr	r2, [r4, #16]
 8003206:	f003 0306 	and.w	r3, r3, #6
 800320a:	2b04      	cmp	r3, #4
 800320c:	bf14      	ite	ne
 800320e:	2500      	movne	r5, #0
 8003210:	6833      	ldreq	r3, [r6, #0]
 8003212:	f04f 0600 	mov.w	r6, #0
 8003216:	bf08      	it	eq
 8003218:	68e5      	ldreq	r5, [r4, #12]
 800321a:	f104 041a 	add.w	r4, r4, #26
 800321e:	bf08      	it	eq
 8003220:	1aed      	subeq	r5, r5, r3
 8003222:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003226:	bf08      	it	eq
 8003228:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800322c:	4293      	cmp	r3, r2
 800322e:	bfc4      	itt	gt
 8003230:	1a9b      	subgt	r3, r3, r2
 8003232:	18ed      	addgt	r5, r5, r3
 8003234:	42b5      	cmp	r5, r6
 8003236:	d11a      	bne.n	800326e <_printf_common+0xd2>
 8003238:	2000      	movs	r0, #0
 800323a:	e008      	b.n	800324e <_printf_common+0xb2>
 800323c:	2301      	movs	r3, #1
 800323e:	4652      	mov	r2, sl
 8003240:	4641      	mov	r1, r8
 8003242:	4638      	mov	r0, r7
 8003244:	47c8      	blx	r9
 8003246:	3001      	adds	r0, #1
 8003248:	d103      	bne.n	8003252 <_printf_common+0xb6>
 800324a:	f04f 30ff 	mov.w	r0, #4294967295
 800324e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003252:	3501      	adds	r5, #1
 8003254:	e7c1      	b.n	80031da <_printf_common+0x3e>
 8003256:	2030      	movs	r0, #48	@ 0x30
 8003258:	18e1      	adds	r1, r4, r3
 800325a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800325e:	1c5a      	adds	r2, r3, #1
 8003260:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003264:	4422      	add	r2, r4
 8003266:	3302      	adds	r3, #2
 8003268:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800326c:	e7c2      	b.n	80031f4 <_printf_common+0x58>
 800326e:	2301      	movs	r3, #1
 8003270:	4622      	mov	r2, r4
 8003272:	4641      	mov	r1, r8
 8003274:	4638      	mov	r0, r7
 8003276:	47c8      	blx	r9
 8003278:	3001      	adds	r0, #1
 800327a:	d0e6      	beq.n	800324a <_printf_common+0xae>
 800327c:	3601      	adds	r6, #1
 800327e:	e7d9      	b.n	8003234 <_printf_common+0x98>

08003280 <_printf_i>:
 8003280:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003284:	7e0f      	ldrb	r7, [r1, #24]
 8003286:	4691      	mov	r9, r2
 8003288:	2f78      	cmp	r7, #120	@ 0x78
 800328a:	4680      	mov	r8, r0
 800328c:	460c      	mov	r4, r1
 800328e:	469a      	mov	sl, r3
 8003290:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003292:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003296:	d807      	bhi.n	80032a8 <_printf_i+0x28>
 8003298:	2f62      	cmp	r7, #98	@ 0x62
 800329a:	d80a      	bhi.n	80032b2 <_printf_i+0x32>
 800329c:	2f00      	cmp	r7, #0
 800329e:	f000 80d1 	beq.w	8003444 <_printf_i+0x1c4>
 80032a2:	2f58      	cmp	r7, #88	@ 0x58
 80032a4:	f000 80b8 	beq.w	8003418 <_printf_i+0x198>
 80032a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80032ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80032b0:	e03a      	b.n	8003328 <_printf_i+0xa8>
 80032b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80032b6:	2b15      	cmp	r3, #21
 80032b8:	d8f6      	bhi.n	80032a8 <_printf_i+0x28>
 80032ba:	a101      	add	r1, pc, #4	@ (adr r1, 80032c0 <_printf_i+0x40>)
 80032bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80032c0:	08003319 	.word	0x08003319
 80032c4:	0800332d 	.word	0x0800332d
 80032c8:	080032a9 	.word	0x080032a9
 80032cc:	080032a9 	.word	0x080032a9
 80032d0:	080032a9 	.word	0x080032a9
 80032d4:	080032a9 	.word	0x080032a9
 80032d8:	0800332d 	.word	0x0800332d
 80032dc:	080032a9 	.word	0x080032a9
 80032e0:	080032a9 	.word	0x080032a9
 80032e4:	080032a9 	.word	0x080032a9
 80032e8:	080032a9 	.word	0x080032a9
 80032ec:	0800342b 	.word	0x0800342b
 80032f0:	08003357 	.word	0x08003357
 80032f4:	080033e5 	.word	0x080033e5
 80032f8:	080032a9 	.word	0x080032a9
 80032fc:	080032a9 	.word	0x080032a9
 8003300:	0800344d 	.word	0x0800344d
 8003304:	080032a9 	.word	0x080032a9
 8003308:	08003357 	.word	0x08003357
 800330c:	080032a9 	.word	0x080032a9
 8003310:	080032a9 	.word	0x080032a9
 8003314:	080033ed 	.word	0x080033ed
 8003318:	6833      	ldr	r3, [r6, #0]
 800331a:	1d1a      	adds	r2, r3, #4
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	6032      	str	r2, [r6, #0]
 8003320:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003324:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003328:	2301      	movs	r3, #1
 800332a:	e09c      	b.n	8003466 <_printf_i+0x1e6>
 800332c:	6833      	ldr	r3, [r6, #0]
 800332e:	6820      	ldr	r0, [r4, #0]
 8003330:	1d19      	adds	r1, r3, #4
 8003332:	6031      	str	r1, [r6, #0]
 8003334:	0606      	lsls	r6, r0, #24
 8003336:	d501      	bpl.n	800333c <_printf_i+0xbc>
 8003338:	681d      	ldr	r5, [r3, #0]
 800333a:	e003      	b.n	8003344 <_printf_i+0xc4>
 800333c:	0645      	lsls	r5, r0, #25
 800333e:	d5fb      	bpl.n	8003338 <_printf_i+0xb8>
 8003340:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003344:	2d00      	cmp	r5, #0
 8003346:	da03      	bge.n	8003350 <_printf_i+0xd0>
 8003348:	232d      	movs	r3, #45	@ 0x2d
 800334a:	426d      	negs	r5, r5
 800334c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003350:	230a      	movs	r3, #10
 8003352:	4858      	ldr	r0, [pc, #352]	@ (80034b4 <_printf_i+0x234>)
 8003354:	e011      	b.n	800337a <_printf_i+0xfa>
 8003356:	6821      	ldr	r1, [r4, #0]
 8003358:	6833      	ldr	r3, [r6, #0]
 800335a:	0608      	lsls	r0, r1, #24
 800335c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003360:	d402      	bmi.n	8003368 <_printf_i+0xe8>
 8003362:	0649      	lsls	r1, r1, #25
 8003364:	bf48      	it	mi
 8003366:	b2ad      	uxthmi	r5, r5
 8003368:	2f6f      	cmp	r7, #111	@ 0x6f
 800336a:	6033      	str	r3, [r6, #0]
 800336c:	bf14      	ite	ne
 800336e:	230a      	movne	r3, #10
 8003370:	2308      	moveq	r3, #8
 8003372:	4850      	ldr	r0, [pc, #320]	@ (80034b4 <_printf_i+0x234>)
 8003374:	2100      	movs	r1, #0
 8003376:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800337a:	6866      	ldr	r6, [r4, #4]
 800337c:	2e00      	cmp	r6, #0
 800337e:	60a6      	str	r6, [r4, #8]
 8003380:	db05      	blt.n	800338e <_printf_i+0x10e>
 8003382:	6821      	ldr	r1, [r4, #0]
 8003384:	432e      	orrs	r6, r5
 8003386:	f021 0104 	bic.w	r1, r1, #4
 800338a:	6021      	str	r1, [r4, #0]
 800338c:	d04b      	beq.n	8003426 <_printf_i+0x1a6>
 800338e:	4616      	mov	r6, r2
 8003390:	fbb5 f1f3 	udiv	r1, r5, r3
 8003394:	fb03 5711 	mls	r7, r3, r1, r5
 8003398:	5dc7      	ldrb	r7, [r0, r7]
 800339a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800339e:	462f      	mov	r7, r5
 80033a0:	42bb      	cmp	r3, r7
 80033a2:	460d      	mov	r5, r1
 80033a4:	d9f4      	bls.n	8003390 <_printf_i+0x110>
 80033a6:	2b08      	cmp	r3, #8
 80033a8:	d10b      	bne.n	80033c2 <_printf_i+0x142>
 80033aa:	6823      	ldr	r3, [r4, #0]
 80033ac:	07df      	lsls	r7, r3, #31
 80033ae:	d508      	bpl.n	80033c2 <_printf_i+0x142>
 80033b0:	6923      	ldr	r3, [r4, #16]
 80033b2:	6861      	ldr	r1, [r4, #4]
 80033b4:	4299      	cmp	r1, r3
 80033b6:	bfde      	ittt	le
 80033b8:	2330      	movle	r3, #48	@ 0x30
 80033ba:	f806 3c01 	strble.w	r3, [r6, #-1]
 80033be:	f106 36ff 	addle.w	r6, r6, #4294967295
 80033c2:	1b92      	subs	r2, r2, r6
 80033c4:	6122      	str	r2, [r4, #16]
 80033c6:	464b      	mov	r3, r9
 80033c8:	4621      	mov	r1, r4
 80033ca:	4640      	mov	r0, r8
 80033cc:	f8cd a000 	str.w	sl, [sp]
 80033d0:	aa03      	add	r2, sp, #12
 80033d2:	f7ff fee3 	bl	800319c <_printf_common>
 80033d6:	3001      	adds	r0, #1
 80033d8:	d14a      	bne.n	8003470 <_printf_i+0x1f0>
 80033da:	f04f 30ff 	mov.w	r0, #4294967295
 80033de:	b004      	add	sp, #16
 80033e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033e4:	6823      	ldr	r3, [r4, #0]
 80033e6:	f043 0320 	orr.w	r3, r3, #32
 80033ea:	6023      	str	r3, [r4, #0]
 80033ec:	2778      	movs	r7, #120	@ 0x78
 80033ee:	4832      	ldr	r0, [pc, #200]	@ (80034b8 <_printf_i+0x238>)
 80033f0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80033f4:	6823      	ldr	r3, [r4, #0]
 80033f6:	6831      	ldr	r1, [r6, #0]
 80033f8:	061f      	lsls	r7, r3, #24
 80033fa:	f851 5b04 	ldr.w	r5, [r1], #4
 80033fe:	d402      	bmi.n	8003406 <_printf_i+0x186>
 8003400:	065f      	lsls	r7, r3, #25
 8003402:	bf48      	it	mi
 8003404:	b2ad      	uxthmi	r5, r5
 8003406:	6031      	str	r1, [r6, #0]
 8003408:	07d9      	lsls	r1, r3, #31
 800340a:	bf44      	itt	mi
 800340c:	f043 0320 	orrmi.w	r3, r3, #32
 8003410:	6023      	strmi	r3, [r4, #0]
 8003412:	b11d      	cbz	r5, 800341c <_printf_i+0x19c>
 8003414:	2310      	movs	r3, #16
 8003416:	e7ad      	b.n	8003374 <_printf_i+0xf4>
 8003418:	4826      	ldr	r0, [pc, #152]	@ (80034b4 <_printf_i+0x234>)
 800341a:	e7e9      	b.n	80033f0 <_printf_i+0x170>
 800341c:	6823      	ldr	r3, [r4, #0]
 800341e:	f023 0320 	bic.w	r3, r3, #32
 8003422:	6023      	str	r3, [r4, #0]
 8003424:	e7f6      	b.n	8003414 <_printf_i+0x194>
 8003426:	4616      	mov	r6, r2
 8003428:	e7bd      	b.n	80033a6 <_printf_i+0x126>
 800342a:	6833      	ldr	r3, [r6, #0]
 800342c:	6825      	ldr	r5, [r4, #0]
 800342e:	1d18      	adds	r0, r3, #4
 8003430:	6961      	ldr	r1, [r4, #20]
 8003432:	6030      	str	r0, [r6, #0]
 8003434:	062e      	lsls	r6, r5, #24
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	d501      	bpl.n	800343e <_printf_i+0x1be>
 800343a:	6019      	str	r1, [r3, #0]
 800343c:	e002      	b.n	8003444 <_printf_i+0x1c4>
 800343e:	0668      	lsls	r0, r5, #25
 8003440:	d5fb      	bpl.n	800343a <_printf_i+0x1ba>
 8003442:	8019      	strh	r1, [r3, #0]
 8003444:	2300      	movs	r3, #0
 8003446:	4616      	mov	r6, r2
 8003448:	6123      	str	r3, [r4, #16]
 800344a:	e7bc      	b.n	80033c6 <_printf_i+0x146>
 800344c:	6833      	ldr	r3, [r6, #0]
 800344e:	2100      	movs	r1, #0
 8003450:	1d1a      	adds	r2, r3, #4
 8003452:	6032      	str	r2, [r6, #0]
 8003454:	681e      	ldr	r6, [r3, #0]
 8003456:	6862      	ldr	r2, [r4, #4]
 8003458:	4630      	mov	r0, r6
 800345a:	f000 f83f 	bl	80034dc <memchr>
 800345e:	b108      	cbz	r0, 8003464 <_printf_i+0x1e4>
 8003460:	1b80      	subs	r0, r0, r6
 8003462:	6060      	str	r0, [r4, #4]
 8003464:	6863      	ldr	r3, [r4, #4]
 8003466:	6123      	str	r3, [r4, #16]
 8003468:	2300      	movs	r3, #0
 800346a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800346e:	e7aa      	b.n	80033c6 <_printf_i+0x146>
 8003470:	4632      	mov	r2, r6
 8003472:	4649      	mov	r1, r9
 8003474:	4640      	mov	r0, r8
 8003476:	6923      	ldr	r3, [r4, #16]
 8003478:	47d0      	blx	sl
 800347a:	3001      	adds	r0, #1
 800347c:	d0ad      	beq.n	80033da <_printf_i+0x15a>
 800347e:	6823      	ldr	r3, [r4, #0]
 8003480:	079b      	lsls	r3, r3, #30
 8003482:	d413      	bmi.n	80034ac <_printf_i+0x22c>
 8003484:	68e0      	ldr	r0, [r4, #12]
 8003486:	9b03      	ldr	r3, [sp, #12]
 8003488:	4298      	cmp	r0, r3
 800348a:	bfb8      	it	lt
 800348c:	4618      	movlt	r0, r3
 800348e:	e7a6      	b.n	80033de <_printf_i+0x15e>
 8003490:	2301      	movs	r3, #1
 8003492:	4632      	mov	r2, r6
 8003494:	4649      	mov	r1, r9
 8003496:	4640      	mov	r0, r8
 8003498:	47d0      	blx	sl
 800349a:	3001      	adds	r0, #1
 800349c:	d09d      	beq.n	80033da <_printf_i+0x15a>
 800349e:	3501      	adds	r5, #1
 80034a0:	68e3      	ldr	r3, [r4, #12]
 80034a2:	9903      	ldr	r1, [sp, #12]
 80034a4:	1a5b      	subs	r3, r3, r1
 80034a6:	42ab      	cmp	r3, r5
 80034a8:	dcf2      	bgt.n	8003490 <_printf_i+0x210>
 80034aa:	e7eb      	b.n	8003484 <_printf_i+0x204>
 80034ac:	2500      	movs	r5, #0
 80034ae:	f104 0619 	add.w	r6, r4, #25
 80034b2:	e7f5      	b.n	80034a0 <_printf_i+0x220>
 80034b4:	080038cf 	.word	0x080038cf
 80034b8:	080038e0 	.word	0x080038e0

080034bc <_sbrk_r>:
 80034bc:	b538      	push	{r3, r4, r5, lr}
 80034be:	2300      	movs	r3, #0
 80034c0:	4d05      	ldr	r5, [pc, #20]	@ (80034d8 <_sbrk_r+0x1c>)
 80034c2:	4604      	mov	r4, r0
 80034c4:	4608      	mov	r0, r1
 80034c6:	602b      	str	r3, [r5, #0]
 80034c8:	f7fd fc02 	bl	8000cd0 <_sbrk>
 80034cc:	1c43      	adds	r3, r0, #1
 80034ce:	d102      	bne.n	80034d6 <_sbrk_r+0x1a>
 80034d0:	682b      	ldr	r3, [r5, #0]
 80034d2:	b103      	cbz	r3, 80034d6 <_sbrk_r+0x1a>
 80034d4:	6023      	str	r3, [r4, #0]
 80034d6:	bd38      	pop	{r3, r4, r5, pc}
 80034d8:	2000054c 	.word	0x2000054c

080034dc <memchr>:
 80034dc:	4603      	mov	r3, r0
 80034de:	b510      	push	{r4, lr}
 80034e0:	b2c9      	uxtb	r1, r1
 80034e2:	4402      	add	r2, r0
 80034e4:	4293      	cmp	r3, r2
 80034e6:	4618      	mov	r0, r3
 80034e8:	d101      	bne.n	80034ee <memchr+0x12>
 80034ea:	2000      	movs	r0, #0
 80034ec:	e003      	b.n	80034f6 <memchr+0x1a>
 80034ee:	7804      	ldrb	r4, [r0, #0]
 80034f0:	3301      	adds	r3, #1
 80034f2:	428c      	cmp	r4, r1
 80034f4:	d1f6      	bne.n	80034e4 <memchr+0x8>
 80034f6:	bd10      	pop	{r4, pc}

080034f8 <_realloc_r>:
 80034f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034fc:	4607      	mov	r7, r0
 80034fe:	4614      	mov	r4, r2
 8003500:	460d      	mov	r5, r1
 8003502:	b921      	cbnz	r1, 800350e <_realloc_r+0x16>
 8003504:	4611      	mov	r1, r2
 8003506:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800350a:	f7ff bc63 	b.w	8002dd4 <_malloc_r>
 800350e:	b92a      	cbnz	r2, 800351c <_realloc_r+0x24>
 8003510:	f7ff fbf6 	bl	8002d00 <_free_r>
 8003514:	4625      	mov	r5, r4
 8003516:	4628      	mov	r0, r5
 8003518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800351c:	f000 f81a 	bl	8003554 <_malloc_usable_size_r>
 8003520:	4284      	cmp	r4, r0
 8003522:	4606      	mov	r6, r0
 8003524:	d802      	bhi.n	800352c <_realloc_r+0x34>
 8003526:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800352a:	d8f4      	bhi.n	8003516 <_realloc_r+0x1e>
 800352c:	4621      	mov	r1, r4
 800352e:	4638      	mov	r0, r7
 8003530:	f7ff fc50 	bl	8002dd4 <_malloc_r>
 8003534:	4680      	mov	r8, r0
 8003536:	b908      	cbnz	r0, 800353c <_realloc_r+0x44>
 8003538:	4645      	mov	r5, r8
 800353a:	e7ec      	b.n	8003516 <_realloc_r+0x1e>
 800353c:	42b4      	cmp	r4, r6
 800353e:	4622      	mov	r2, r4
 8003540:	4629      	mov	r1, r5
 8003542:	bf28      	it	cs
 8003544:	4632      	movcs	r2, r6
 8003546:	f7ff fbcd 	bl	8002ce4 <memcpy>
 800354a:	4629      	mov	r1, r5
 800354c:	4638      	mov	r0, r7
 800354e:	f7ff fbd7 	bl	8002d00 <_free_r>
 8003552:	e7f1      	b.n	8003538 <_realloc_r+0x40>

08003554 <_malloc_usable_size_r>:
 8003554:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003558:	1f18      	subs	r0, r3, #4
 800355a:	2b00      	cmp	r3, #0
 800355c:	bfbc      	itt	lt
 800355e:	580b      	ldrlt	r3, [r1, r0]
 8003560:	18c0      	addlt	r0, r0, r3
 8003562:	4770      	bx	lr

08003564 <_init>:
 8003564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003566:	bf00      	nop
 8003568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800356a:	bc08      	pop	{r3}
 800356c:	469e      	mov	lr, r3
 800356e:	4770      	bx	lr

08003570 <_fini>:
 8003570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003572:	bf00      	nop
 8003574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003576:	bc08      	pop	{r3}
 8003578:	469e      	mov	lr, r3
 800357a:	4770      	bx	lr
